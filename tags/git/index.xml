<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Git on mazhen.tech</title>
        <link>https://mazhen.tech/tags/git/</link>
        <description>Recent content in Git on mazhen.tech</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 15 Jan 2018 14:38:05 +0800</lastBuildDate><atom:link href="https://mazhen.tech/tags/git/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Git Feature Branch Workflow</title>
        <link>https://mazhen.tech/p/git-feature-branch-workflow/</link>
        <pubDate>Mon, 15 Jan 2018 14:38:05 +0800</pubDate>
        
        <guid>https://mazhen.tech/p/git-feature-branch-workflow/</guid>
        <description>&lt;p&gt;Zion项目我们采用&lt;a class=&#34;link&#34; href=&#34;https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Feature Branch Workflow&lt;/a&gt;，即每个特性在&lt;code&gt;branch&lt;/code&gt;中开发，&lt;code&gt;master&lt;/code&gt;始终保持稳定。特性开发完成，需提交&lt;code&gt;pull request&lt;/code&gt;，接受其他成员的code review，同时可以在&lt;code&gt;PR&lt;/code&gt;中围绕该特性进行讨论，&lt;code&gt;PR&lt;/code&gt;记录了开发过程的细节。&lt;/p&gt;
&lt;p&gt;由于是内部项目，我们没有使用&lt;code&gt;fork&lt;/code&gt;机制，代码都维护在Github上的一个仓库：&lt;a class=&#34;link&#34; href=&#34;https://github.com/apusic/zion&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;apusic/zion&lt;/a&gt;。在看具体的流程前，先有一个全局视图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011427447.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;git&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;基本工作流程&#34;&gt;
    &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e5%b7%a5%e4%bd%9c%e6%b5%81%e7%a8%8b&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    基本工作流程
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;从远程clone respository&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/apusic/zion.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建特性分支&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先让本地的master处于最新状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git fetch
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git rebase origin/master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;创建分支&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout -b myfeature
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在分支上进行开发&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git status # View the state of the repo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add # Stage a file
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit # Commit a file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;进行一个功能特性开发时，可以多次提交到本地仓库&lt;code&gt;Repository&lt;/code&gt;，不必每次&lt;code&gt;commit&lt;/code&gt;都push到远程仓库&lt;code&gt;Remote&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;开发过程中，保持分支和最新代码同步&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# While on your myfeature branch.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git fetch
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git rebase origin/master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;关于&lt;code&gt;rebase&lt;/code&gt;的详细说明，请参考 &lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/book/en/v2/Git-Branching-Rebasing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The &amp;ldquo;Git Branching - Rebasing&amp;rdquo; chapter from the Pro Git book.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;后面会单独介绍&lt;code&gt;rebase&lt;/code&gt;冲突的处理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;将分支发布到中心仓库&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有改动都提交后，执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push -f origin myfeature
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建pull request&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;访问&lt;a class=&#34;link&#34; href=&#34;https://github.com/apusic/Zion&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;项目主页&lt;/a&gt;，点击&lt;code&gt;Compare &amp;amp; pull request&lt;/code&gt;创建&lt;code&gt;pull request&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;code review &amp;amp; discussions&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以要求一个或两个项目成员进行review，也可以围绕该特性进行讨论。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Merge pull requests&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据项目的配置，&lt;code&gt;pull requests&lt;/code&gt;在merge进master之前要满足一些条件，例如至少两个成员review，通过集成测试等。&lt;/p&gt;
&lt;p&gt;所有的检查都通过后，这个&lt;code&gt;pull request&lt;/code&gt;就可以merge了。详细的操作参见 &lt;a class=&#34;link&#34; href=&#34;https://help.github.com/articles/merging-a-pull-request/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Merging a pull request&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有三个merge选型：&lt;code&gt;Merge pull request&lt;/code&gt;，&lt;code&gt;Squash and merge&lt;/code&gt;，&lt;code&gt;Rebase and merge&lt;/code&gt;，关于它们的区别请参考&lt;a class=&#34;link&#34; href=&#34;https://help.github.com/articles/about-pull-request-merges/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub的帮助&lt;/a&gt;。 一般建议选择&lt;code&gt;Squash and merge&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;至此，一个特性就开发完成了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;删除分支&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;已经完成merged的 &lt;code&gt;pull requests&lt;/code&gt; 关联的分支可以在GitHub删除，详细的操作步骤参见GitHub文档 &lt;a class=&#34;link&#34; href=&#34;https://help.github.com/articles/deleting-and-restoring-branches-in-a-pull-request/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Deleting and restoring branches in a pull request&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;冲突处理&#34;&gt;
    &lt;a href=&#34;#%e5%86%b2%e7%aa%81%e5%a4%84%e7%90%86&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    冲突处理
&lt;/h2&gt;&lt;p&gt;上面的流程中，在保持分支和最新代码同步时，最有可能产生冲突。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rebase&lt;/code&gt;提示冲突，会列出冲突文件，执行下列步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手工解决冲突&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add &amp;lt;some-file&amp;gt;&lt;/code&gt; 将发生冲突的文件放回&lt;code&gt;index&lt;/code&gt;区&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rebase --continue&lt;/code&gt; 继续进行rebase&lt;/li&gt;
&lt;li&gt;提示rebase成功&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;code&gt;Merge pull requests&lt;/code&gt;过程中也可能产生冲突，可以在GitHub的界面上解决冲突，详细的操作轻参考&lt;a class=&#34;link&#34; href=&#34;https://help.github.com/articles/addressing-merge-conflicts/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Addressing merge conflicts&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果冲突较多，建议先在客户端执行rebase，按照上面的步骤解决完冲突，再进行&lt;code&gt;Merge pull requests&lt;/code&gt;。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
