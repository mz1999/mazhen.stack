<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Windows on mazhen.tech</title>
        <link>https://mazhen.tech/tags/windows/</link>
        <description>Recent content in Windows on mazhen.tech</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 28 Dec 2024 21:24:25 +0800</lastBuildDate><atom:link href="https://mazhen.tech/tags/windows/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>为 PowerShell 配置 Emacs 模式</title>
        <link>https://mazhen.tech/p/%E4%B8%BA-powershell-%E9%85%8D%E7%BD%AE-emacs-%E6%A8%A1%E5%BC%8F/</link>
        <pubDate>Sat, 28 Dec 2024 21:24:25 +0800</pubDate>
        
        <guid>https://mazhen.tech/p/%E4%B8%BA-powershell-%E9%85%8D%E7%BD%AE-emacs-%E6%A8%A1%E5%BC%8F/</guid>
        <description>&lt;p&gt;对于长期在 macOS 或 Linux 终端环境下工作的人来说，Windows 的终端体验可能会显得有些格格不入。尤其是 PowerShell，它的默认交互方式与熟悉的 bash 或 zsh 存在显著差异。本文将从配置 Emacs 模式入手，深入了解 Windows 终端的生态，并逐步打造一个更符合你习惯的 PowerShell 环境。&lt;/p&gt;
&lt;h2 id=&#34;windows-终端不止-cmdexe-和-powershell&#34;&gt;
    &lt;a href=&#34;#windows-%e7%bb%88%e7%ab%af%e4%b8%8d%e6%ad%a2-cmdexe-%e5%92%8c-powershell&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Windows 终端：不止 cmd.exe 和 PowerShell
&lt;/h2&gt;&lt;p&gt;在 Windows 中，我们经常会接触到以下几个概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;命令提示符 (cmd.exe)：&lt;/strong&gt; 这是 Windows 最早的命令行解释器，可以追溯到 DOS 时代。它执行简单的命令，但功能相对有限，交互体验也较为落后。我们可以将其视为 Windows 系统的“元老”，用于执行一些基本的命令操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PowerShell：&lt;/strong&gt; 这是一个更加现代和强大的命令行外壳，基于 .NET 框架构建，以对象而非文本处理数据，更适合自动化、脚本编写和系统管理。它可以被视为 Windows 系统的“新贵”，旨在替代 cmd.exe，成为系统管理的主力工具。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows Terminal (Windows 终端)：&lt;/strong&gt; 这是一个独立的应用程序，用于承载各种命令行 shell（如 cmd.exe, PowerShell, WSL 等）。它提供了标签页、分屏、自定义主题等高级特性，使得在不同外壳之间切换更加便捷。你可以将它视为一个更强大、更现代的“终端模拟器”，用于统一管理各种命令行环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;它们之间的关系：&lt;/strong&gt; &lt;strong&gt;Windows Terminal&lt;/strong&gt; 是一个终端应用程序，它像一个容器，可以运行 &lt;strong&gt;cmd.exe&lt;/strong&gt; 和 &lt;strong&gt;PowerShell&lt;/strong&gt; 等命令行 shell。 &lt;strong&gt;cmd.exe&lt;/strong&gt; 和 &lt;strong&gt;PowerShell&lt;/strong&gt; 是不同的命令行解释器，负责解释用户输入的命令并执行操作。也就是说，&lt;strong&gt;cmd.exe&lt;/strong&gt; 和 &lt;strong&gt;PowerShell&lt;/strong&gt; 是 &lt;strong&gt;Windows Terminal&lt;/strong&gt; 中的两种“引擎”。&lt;/p&gt;
&lt;h2 id=&#34;psreadlinepowershell-的交互核心&#34;&gt;
    &lt;a href=&#34;#psreadlinepowershell-%e7%9a%84%e4%ba%a4%e4%ba%92%e6%a0%b8%e5%bf%83&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    PSReadLine：PowerShell 的交互核心
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;PSReadLine&lt;/strong&gt; 是 PowerShell 的一个核心模块，负责处理终端中的文本输入、历史记录、命令补全、语法高亮等关键功能。它直接影响着你在 PowerShell 中的操作效率和流畅度。如果没有 &lt;strong&gt;PSReadLine&lt;/strong&gt;，PowerShell 的交互体验会大打折扣。&lt;/p&gt;
&lt;h3 id=&#34;版本与功能&#34;&gt;
    &lt;a href=&#34;#%e7%89%88%e6%9c%ac%e4%b8%8e%e5%8a%9f%e8%83%bd&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    版本与功能
&lt;/h3&gt;&lt;p&gt;Windows 11 预装的 Windows PowerShell 5.1 虽然自带 &lt;code&gt;PSReadLine&lt;/code&gt; 模块，但其功能较为基础。为了获得更流畅的体验和更强大的功能，例如预测性 IntelliSense 和更强大的多行编辑，强烈建议升级到 &lt;strong&gt;PowerShell 7.2 或更高版本&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;升级-powershell-powershell-core&#34;&gt;
    &lt;a href=&#34;#%e5%8d%87%e7%ba%a7-powershell-powershell-core&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    升级 PowerShell (PowerShell Core)
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;下载：&lt;/strong&gt; 从 &lt;a class=&#34;link&#34; href=&#34;https://github.com/PowerShell/PowerShell/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft 官方 GitHub 仓库&lt;/a&gt; 下载最新版本的 PowerShell 安装包，并按照安装向导完成安装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置终端：&lt;/strong&gt; 在终端应用程序 Windows Terminal 中，增加一个新的配置文件，将命令行选项设置为你最新安装的 PowerShell 可执行文件路径，例如 &lt;code&gt;&amp;quot;C:\Program Files\PowerShell\7\pwsh.exe&amp;quot;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证版本：&lt;/strong&gt; 在 PowerShell 中运行 &lt;code&gt;Get-Module PSReadLine -ListAvailable&lt;/code&gt;，检查 PSReadLine 版本。如果没有任何输出或版本低于 2.0，则需要升级，详见下文的 PSReadLine 的升级方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;psreadline-的升级&#34;&gt;
    &lt;a href=&#34;#psreadline-%e7%9a%84%e5%8d%87%e7%ba%a7&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    PSReadLine 的升级
&lt;/h3&gt;&lt;p&gt;如果你的 PSReadLine 版本过旧，请运行以下命令更新：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Install-Module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PSReadLine&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Force&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;emacs-模式让-powershell-更顺手&#34;&gt;
    &lt;a href=&#34;#emacs-%e6%a8%a1%e5%bc%8f%e8%ae%a9-powershell-%e6%9b%b4%e9%a1%ba%e6%89%8b&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Emacs 模式：让 PowerShell 更顺手
&lt;/h2&gt;&lt;p&gt;在深入配置 Emacs 模式之前，我们先来了解一下 PowerShell 的 profile 文件。&lt;/p&gt;
&lt;h3 id=&#34;什么是-powershell-profile&#34;&gt;
    &lt;a href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-powershell-profile&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    什么是 PowerShell Profile
&lt;/h3&gt;&lt;p&gt;PowerShell profile 相当于 PowerShell 的启动脚本。每次启动 PowerShell 时，它都会自动执行 profile 文件中的命令。这使得你可以自定义 PowerShell 环境，例如设置别名、函数、环境变量，以及在本例中，配置 PSReadLine 的编辑模式等。可以把它看作是 PowerShell 的“初始化文件”。&lt;/p&gt;
&lt;p&gt;PowerShell 支持多个 profile 文件，它们根据不同的作用域加载。最常用的 profile 文件路径通常是 &lt;code&gt;C:\Users\&amp;lt;用户名&amp;gt;\Documents\PowerShell\Microsoft.PowerShell_profile.ps1&lt;/code&gt;，它针对当前用户的所有 PowerShell 会话加载。&lt;/p&gt;
&lt;p&gt;理解了 profile 文件的作用后，我们就可以开始配置 Emacs 模式了。&lt;/p&gt;
&lt;h3 id=&#34;如何在-powershell-profile-中设置-emacs-模式&#34;&gt;
    &lt;a href=&#34;#%e5%a6%82%e4%bd%95%e5%9c%a8-powershell-profile-%e4%b8%ad%e8%ae%be%e7%bd%ae-emacs-%e6%a8%a1%e5%bc%8f&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    如何在 PowerShell profile 中设置 Emacs 模式
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;获取 profile 文件路径&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 PowerShell 中运行 &lt;code&gt;$PROFILE&lt;/code&gt;，获取 profile 文件路径。通常这个路径类似于&lt;code&gt;C:\Users\&amp;lt;用户名&amp;gt;\Documents\PowerShell\Microsoft.PowerShell_profile.ps1&lt;/code&gt;。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;创建配置文件&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在默认情况下，PowerShell 的 &lt;code&gt;$PROFILE&lt;/code&gt; 文件可能并不存在。可以使用以下命令检查文件是否存在：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Test-Path&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PROFILE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果返回 &lt;code&gt;False&lt;/code&gt;，说明该文件还没有创建。可以使用以下命令来创建该文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;New-Item&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Path&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PROFILE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ItemType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Force&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;编辑 profile 文件&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一旦文件创建完成，您可以使用任意文本编辑器打开并编辑 &lt;code&gt;$PROFILE&lt;/code&gt; 文件。例如使用 &lt;code&gt;notepad&lt;/code&gt; 打开配置文件：&lt;code&gt;notepad $PROFILE&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;添加配置&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在配置文件中，添加以下行来启用 Emacs 模式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;set-PSReadLineOption&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-EditMode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Emacs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这行代码会在每次启动 PowerShell 时自动将编辑模式设置为 Emacs。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;strong&gt;保存并重启 PowerShell&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;编辑并保存 &lt;code&gt;$PROFILE&lt;/code&gt; 文件后，关闭并重新启动 PowerShell。重新打开后，PowerShell 将自动加载您的配置文件，并启用 Emacs 编辑模式。&lt;/p&gt;
&lt;p&gt;另外，&lt;code&gt;$PROFILE&lt;/code&gt; 配置文件可以用于保存各种个性化设置，包括自定义函数、别名、环境变量等。在 PowerShell 7+ 中，PowerShell 使用的 &lt;code&gt;$PROFILE&lt;/code&gt; 文件路径会有细微变化，确保在编辑前检查 &lt;code&gt;$PROFILE&lt;/code&gt; 的具体路径。&lt;/p&gt;
&lt;h3 id=&#34;其他-psreadline-配置&#34;&gt;
    &lt;a href=&#34;#%e5%85%b6%e4%bb%96-psreadline-%e9%85%8d%e7%bd%ae&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    其他 PSReadLine 配置
&lt;/h3&gt;&lt;p&gt;在配置了 Emacs 模式后，PSReadLine 还有许多其他有用的配置选项，可以进一步提升你的使用体验。以下是一些常用的配置示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自定义历史记录保存路径：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-PSReadLineOption&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-HistorySavePath&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;path/to/your/history.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过此设置，你可以将 PowerShell 的命令历史记录保存到指定的文件中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;设置历史记录的最大条数：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-POWERSHELL&#34; data-lang=&#34;POWERSHELL&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-PSReadLineOption&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-MaximumHistoryCount&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;此设置可以限制 PowerShell 保存的历史记录条数，防止历史记录文件过大。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;设置预测命令的来源为历史记录：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-PSReadLineOption&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-PredictionSource&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;History
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;设置命令预测的来源，可以使用历史记录或插件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查看和自定义快捷键：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-PSReadLineKeyHandler&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用此命令可以查看当前 PSReadLine 定义的快捷键。你还可以自定义快捷键，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-PSReadLineKeyHandler&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Key&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ClearScreen&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个命令将 Ctrl + L 键绑定到 &lt;code&gt;ClearScreen&lt;/code&gt; 函数，实现清屏的功能。&lt;/p&gt;
&lt;h3 id=&#34;常用快捷键&#34;&gt;
    &lt;a href=&#34;#%e5%b8%b8%e7%94%a8%e5%bf%ab%e6%8d%b7%e9%94%ae&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    常用快捷键
&lt;/h3&gt;&lt;p&gt;掌握一些常用的快捷键可以大大提高在 PowerShell 中的工作效率。以下是一些常用的快捷键：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PowerShell 快捷键：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + C&lt;/code&gt;: 中断当前正在执行的命令。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tab&lt;/code&gt;: 自动补全命令、路径或变量名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + R&lt;/code&gt;: 搜索历史命令。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;↑&lt;/code&gt; 或 &lt;code&gt;↓&lt;/code&gt;: 浏览历史命令。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + T&lt;/code&gt;: 在 Windows Terminal 中打开新的 tab&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Emacs 模式快捷键：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + A&lt;/code&gt;: 将光标移动到行首。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + E&lt;/code&gt;: 将光标移动到行尾。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + B&lt;/code&gt;: 光标左移一个字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + F&lt;/code&gt;: 光标右移一个字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + B&lt;/code&gt;: 将光标移动到上一个单词的开头。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + F&lt;/code&gt;: 将光标移动到下一个单词的开头。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + D&lt;/code&gt;: 删除光标后的单词。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + K&lt;/code&gt;: 删除光标到行尾的所有内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + U&lt;/code&gt;: 删除光标到行首的所有内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过这个设置和快捷键的掌握，您可以在 PowerShell 中体验更接近 Emacs 的编辑体验，并提高命令行的使用效率。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
