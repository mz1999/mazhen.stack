<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>networking on mazhen.tech</title>
        <link>https://mazhen.tech/tags/networking/</link>
        <description>Recent content in networking on mazhen.tech</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 07 Oct 2019 09:59:29 +0800</lastBuildDate><atom:link href="https://mazhen.tech/tags/networking/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>HTTP/2 简介</title>
        <link>https://mazhen.tech/p/http/2-%E7%AE%80%E4%BB%8B/</link>
        <pubDate>Mon, 07 Oct 2019 09:59:29 +0800</pubDate>
        
        <guid>https://mazhen.tech/p/http/2-%E7%AE%80%E4%BB%8B/</guid>
        <description>&lt;h3 id=&#34;outline&#34;&gt;Outline&lt;/h3&gt;
&lt;p&gt;回顾HTTP的发展简史，理解HTTP在设计上的关键转变，以及每次转变的动机&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP简史&lt;/li&gt;
&lt;li&gt;HTTP/1.1的主要特性和问题&lt;/li&gt;
&lt;li&gt;HTTP/2 的核心概念、主要特性&lt;/li&gt;
&lt;li&gt;HTTP/2 的升级与发现&lt;/li&gt;
&lt;li&gt;HTTP/2 的问题及展望&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http简史&#34;&gt;HTTP简史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP&lt;/code&gt;(HyperText Transfer Protocol，超文本传输协议)是互联网上最普遍采用的一种应用协议&lt;/li&gt;
&lt;li&gt;由欧洲核子研究委员会&lt;code&gt;CERN&lt;/code&gt;的英国工程师&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Tim_Berners-Lee&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tim Berners-Lee&lt;/a&gt;在1991年发明&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Tim_Berners-Lee&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tim Berners-Lee&lt;/a&gt;也是WWW的发明者&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http简史-1&#34;&gt;HTTP简史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP/0.9&lt;/code&gt;：只有一行的协议
&lt;ul&gt;
&lt;li&gt;请求只有一行，包括&lt;code&gt;GET&lt;/code&gt;方法和要请求的文档的路径&lt;/li&gt;
&lt;li&gt;响应是一个超文本文档，没有首部，也没有其他元数据，只有&lt;code&gt;HTML&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;服务器与客户端之间的连接在每次请求之后都会关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP/0.9&lt;/code&gt;的设计目标传递超文本文档&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http简史-2&#34;&gt;HTTP简史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP/0.9&lt;/code&gt;演示&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$&amp;gt; telnet apache.org 80
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Trying 95.216.24.32...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connected to apache.org.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Escape character is &amp;#39;^]&amp;#39;.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GET /foundation/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connection closed by foreign host.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;http简史-3&#34;&gt;HTTP简史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1996年&lt;code&gt;HTTP&lt;/code&gt;工作组发布了&lt;code&gt;RFC 1945&lt;/code&gt;，这就是&lt;code&gt;HTTP/1.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;提供请求和响应的各种元数据&lt;/li&gt;
&lt;li&gt;不局限于超文本的传输，响应可以是任何类型：&lt;code&gt;HTML&lt;/code&gt;文件、图片、音频等&lt;/li&gt;
&lt;li&gt;支持内容协商、内容编码、字符集、认证、缓存等&lt;/li&gt;
&lt;li&gt;从&lt;strong&gt;超文本&lt;/strong&gt;到&lt;strong&gt;超媒体&lt;/strong&gt;传输&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http简史-4&#34;&gt;HTTP简史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP/1.0&lt;/code&gt;演示&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$&amp;gt; telnet apache.org 80
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Trying 95.216.24.32...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connected to apache.org.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GET /foundation/ HTTP/1.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Accept: */*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 200 OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server: Apache/2.4.18 (Ubuntu)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Length: 46012
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connection: close
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Type: text/html
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connection closed by foreign host.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;http简史-5&#34;&gt;HTTP简史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1997年1月定义&lt;code&gt;HTTP/1.1&lt;/code&gt;标准的&lt;code&gt;RFC 2068&lt;/code&gt;发布&lt;/li&gt;
&lt;li&gt;1999年6月&lt;code&gt;RFC 2616&lt;/code&gt;发布，取代了&lt;code&gt;RFC 2068&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;性能优化
&lt;ul&gt;
&lt;li&gt;持久连接
&lt;ul&gt;
&lt;li&gt;除非明确告知，默认使用持久连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分块编码传输&lt;/li&gt;
&lt;li&gt;请求管道，支持并行请求处理（应用的非常有限）&lt;/li&gt;
&lt;li&gt;增强的缓存机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http简史-6&#34;&gt;HTTP简史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP/1.1&lt;/code&gt;演示&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt;$ telnet www.baidu.com 80
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Trying 14.215.177.38...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connected to www.a.shifen.com.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GET /s?wd=http2 HTTP/1.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Accept: text/html,application/xhtml+xml,application/xml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connection: keep-alive
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Host: www.baidu.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 200 OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connection: Keep-Alive
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Type: text/html;charset=utf-8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date: Sun, 06 Oct 2019 12:49:28 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server: BWS/1.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Transfer-Encoding: chunked
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ffa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1be7
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GET /img/bd_logo1.png HTTP/1.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Accept: text/html,application/xhtml+xml,application/xml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connection: close
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Host: www.baidu.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 200 OK
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Length: 7877
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Type: image/png
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date: Sun, 06 Oct 2019 13:05:06 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Etag: &amp;#34;1ec5-502264e2ae4c0&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Expires: Wed, 03 Oct 2029 13:05:06 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Last-Modified: Wed, 03 Sep 2014 10:00:27 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server: Apache
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Set-Cookie: BAIDUID=0D01C3C9C00A6019C16F79CAEB1EFE91:FG=1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connection: close
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connection closed by foreign host.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;http简史-7&#34;&gt;HTTP简史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Google在2009年发布了实验性协议&lt;code&gt;SPDY&lt;/code&gt;，主要目标是解决&lt;code&gt;HTTP/1.1&lt;/code&gt;的性能限制&lt;/li&gt;
&lt;li&gt;Google工程师在09年11月分享了实验结果 &lt;a class=&#34;link&#34; href=&#34;https://blog.chromium.org/2009/11/2x-faster-web.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;A 2x Faster Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;So far we have only tested SPDY in lab conditions. The initial results are very encouraging: when we download the top 25 websites over simulated home network connections, we see a significant improvement in performance - pages loaded up to 55% faster.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;2012年，&lt;code&gt;SPDY&lt;/code&gt;得到Chrome、Firefox和Opera的支持&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP-WG&lt;/code&gt;(HTTP Working Group)开始在&lt;code&gt;SPDY&lt;/code&gt;的基础上制定官方标准&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http简史-8&#34;&gt;HTTP简史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2015年正式发布&lt;code&gt;HTTP/2&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;主要目标：改进传输性能，降低延迟，提高吞吐量&lt;/li&gt;
&lt;li&gt;保持原有的高层协议语义不变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根据&lt;a class=&#34;link&#34; href=&#34;https://w3techs.com/technologies/details/ce-http2/all/all&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;W3Techs的报告&lt;/a&gt;，截止2019年11月，全球已经有 &lt;strong&gt;42.1%&lt;/strong&gt; 的网站开启了&lt;code&gt;HTTP/2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http简史-9&#34;&gt;HTTP简史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Google在2012年设计开发了&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/QUIC&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;QUIC协议&lt;/a&gt;，让&lt;code&gt;HTTP&lt;/code&gt;不再基于&lt;code&gt;TCP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2018年底，&lt;code&gt;HTTP/3&lt;/code&gt;标准发布&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP/3&lt;/code&gt;协议业务逻辑变化不大，可以简单理解为 &lt;code&gt;HTTP/2&lt;/code&gt; + &lt;code&gt;QUIC&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http11-持久连接&#34;&gt;HTTP/1.1 持久连接&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221002459.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tcp-connection1&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http11-持久连接-1&#34;&gt;HTTP/1.1 持久连接&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221002365.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tcp-connection2&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http11-持久连接-2&#34;&gt;HTTP/1.1 持久连接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;非持久&lt;code&gt;HTTP&lt;/code&gt;连接的固定时间成本
&lt;ul&gt;
&lt;li&gt;至少两次网络往返： 握手、请求和响应&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务处理速度越快，固定延迟的影响就越大&lt;/li&gt;
&lt;li&gt;持久连接避免&lt;code&gt;TCP&lt;/code&gt;连接时的三次握手，消除&lt;code&gt;TCP&lt;/code&gt;的慢启动&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http11-管道&#34;&gt;HTTP/1.1 管道&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多次请求必须满足&lt;strong&gt;先进先出&lt;/strong&gt;(FIFO)的顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221004912.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;http-keep-alive&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http11-管道-1&#34;&gt;HTTP/1.1 管道&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;尽早发送请求，不被每次响应阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221005557.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;http-pipeline&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http11-管道-2&#34;&gt;HTTP/1.1 管道&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP/1.1&lt;/code&gt;的局限性
&lt;ul&gt;
&lt;li&gt;只能严格串行地返回响应，不允许一个连接上的多个响应交错到达&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;管道的问题
&lt;ul&gt;
&lt;li&gt;并行处理请求时，服务器必须缓冲管道中的响应，占用服务器资源&lt;/li&gt;
&lt;li&gt;由于失败可能导致重复处理，非幂等的方法不能pipeline化&lt;/li&gt;
&lt;li&gt;由于中间代理的兼容性，可能会破坏管道&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;管道的应用非常有限&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http11-的协议开销&#34;&gt;&lt;code&gt;HTTP/1.1&lt;/code&gt; 的协议开销&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每个&lt;code&gt;HTTP&lt;/code&gt;请求都会携带500~800字节的&lt;code&gt;header&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果使用了&lt;code&gt;cookie&lt;/code&gt;，每个&lt;code&gt;HTTP&lt;/code&gt;请求会增加几千字节的协议开销&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP header&lt;/code&gt;以纯文本形式发送，不会进行任何压缩&lt;/li&gt;
&lt;li&gt;某些时候&lt;code&gt;HTTP header&lt;/code&gt;开销会超过实际传输的数据一个数量级
&lt;ul&gt;
&lt;li&gt;例如访问&lt;code&gt;RESTful API&lt;/code&gt;时返回&lt;code&gt;JSON&lt;/code&gt;格式的响应&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http11性能优化建议&#34;&gt;&lt;code&gt;HTTP/1.1&lt;/code&gt;性能优化建议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;由于&lt;code&gt;HTTP/1.1&lt;/code&gt;不支持多路复用
&lt;ul&gt;
&lt;li&gt;浏览器支持每个主机打开多个连接（例如Chrome是6个）&lt;/li&gt;
&lt;li&gt;应用使用多域名，将资源分散到多个子域名
&lt;ul&gt;
&lt;li&gt;浏览器连接限制针对的是主机名，不是&lt;code&gt;IP&lt;/code&gt;地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;消耗客户端和服务器资源&lt;/li&gt;
&lt;li&gt;域名分区增加了额外的&lt;code&gt;DNS&lt;/code&gt;查询&lt;/li&gt;
&lt;li&gt;避免不了&lt;code&gt;TCP&lt;/code&gt;的慢启动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http11性能优化建议-1&#34;&gt;&lt;code&gt;HTTP/1.1&lt;/code&gt;性能优化建议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用多域名分区
&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221005735.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;connection view&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http11性能优化建议-2&#34;&gt;&lt;code&gt;HTTP/1.1&lt;/code&gt;性能优化建议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;减少请求次数
&lt;ul&gt;
&lt;li&gt;把多个&lt;code&gt;JavaScript&lt;/code&gt;或&lt;code&gt;CSS&lt;/code&gt;组合为一个文件&lt;/li&gt;
&lt;li&gt;把多张图片组合为一个更大的复合的图片&lt;/li&gt;
&lt;li&gt;inlining内联，将图片嵌入到&lt;code&gt;CSS&lt;/code&gt;或者&lt;code&gt;HTML&lt;/code&gt;文件中，减少网络请求次数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;增加应用的复杂度，导致缓存、更新等问题，只是权宜之计&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2-的目标&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt; 的目标&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;性能优化
&lt;ul&gt;
&lt;li&gt;支持请求与响应的多路复用&lt;/li&gt;
&lt;li&gt;支持请求优先级和流量控制&lt;/li&gt;
&lt;li&gt;支持服务器端推送&lt;/li&gt;
&lt;li&gt;压缩&lt;code&gt;HTTP header&lt;/code&gt;降低协议开销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP的语义不变
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP&lt;/code&gt;方法、&lt;code&gt;header&lt;/code&gt;、状态码、&lt;code&gt;URI&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2-二进制分帧层&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt; 二进制分帧层&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;引入新的二进制分帧数据层&lt;/li&gt;
&lt;li&gt;将传输的信息分割为消息和帧，并采用二进制格式的编码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221006530.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;binary-framing-layer&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2-的核心概念&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt; 的核心概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;流(Stream)
&lt;ul&gt;
&lt;li&gt;已建立的连接上的双向字节流&lt;/li&gt;
&lt;li&gt;该字节流可以携带一个或多个消息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;消息(Message)
&lt;ul&gt;
&lt;li&gt;与请求/响应消息对应的一系列完整的数据帧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;帧(Frame)
&lt;ul&gt;
&lt;li&gt;通信的最小单位&lt;/li&gt;
&lt;li&gt;每个帧包含帧首部，标识出当前帧所属的流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2-的核心概念-1&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt; 的核心概念&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221007794.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;stream-message-frame&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2-的核心概念-2&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt; 的核心概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所有&lt;code&gt;HTTP/2&lt;/code&gt;通信都在一个TCP连接上完成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;流&lt;/code&gt;是连接中的一个虚拟信道，可以承载双向的消息&lt;/li&gt;
&lt;li&gt;一个连接可以承载任意数量的&lt;code&gt;流&lt;/code&gt;，每个&lt;code&gt;流&lt;/code&gt;都有一个唯一的整数标识符(1、2&amp;hellip;N)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;消息&lt;/code&gt;是指逻辑上的&lt;code&gt;HTTP&lt;/code&gt;消息，比如请求、响应等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;消息&lt;/code&gt;由一或多个&lt;code&gt;帧&lt;/code&gt;组成，这些帧可以交错发送，然后根据每个帧首部的&lt;strong&gt;流标识符&lt;/strong&gt;重新组装&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2请求与响应的多路复用&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt;请求与响应的多路复用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP/1.x&lt;/code&gt;中，如果客户端想发送多个并行的请求，那么必须使用多个&lt;code&gt;TCP&lt;/code&gt;连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP/2&lt;/code&gt;中，客户端可以使用多个流发送请求，同时&lt;code&gt;HTTP&lt;/code&gt;消息被分解为互不依赖的帧，交错传输，最后在另一端重新组装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221007697.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;http2-connection&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2-帧格式&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt; 帧格式&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221008713.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;frame format&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;详细说明请参考&lt;a class=&#34;link&#34; href=&#34;https://tools.ietf.org/html/rfc7540&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTTP/2规范&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2-帧类型&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt; 帧类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;客户端通过&lt;code&gt;HEADERS&lt;/code&gt;帧来发起新的&lt;code&gt;流&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;服务器通过&lt;code&gt;PUSH_PROMISE&lt;/code&gt;帧来发起推送流&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;帧类型&lt;/th&gt;
&lt;th&gt;类型编码&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DATA&lt;/td&gt;
&lt;td&gt;0x0&lt;/td&gt;
&lt;td&gt;传输HTTP消息体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HEADERS&lt;/td&gt;
&lt;td&gt;0x1&lt;/td&gt;
&lt;td&gt;传输HTTP头部&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PRIORITY&lt;/td&gt;
&lt;td&gt;0x2&lt;/td&gt;
&lt;td&gt;指定流的优先级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RST_STREAM&lt;/td&gt;
&lt;td&gt;0x3&lt;/td&gt;
&lt;td&gt;通知流的非正常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SETTINGS&lt;/td&gt;
&lt;td&gt;0x4&lt;/td&gt;
&lt;td&gt;修改连接或者流的配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUSH_PROMISE&lt;/td&gt;
&lt;td&gt;0x5&lt;/td&gt;
&lt;td&gt;服务端推送资源时的请求帧&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PING&lt;/td&gt;
&lt;td&gt;0x6&lt;/td&gt;
&lt;td&gt;心跳检测，计算&lt;code&gt;RTT&lt;/code&gt;往返时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GOAWAY&lt;/td&gt;
&lt;td&gt;0x7&lt;/td&gt;
&lt;td&gt;优雅的终止连接，或者通知错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WINDOW_UPDATE&lt;/td&gt;
&lt;td&gt;0x8&lt;/td&gt;
&lt;td&gt;针对流或者连接，实现流量控制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CONTINUATION&lt;/td&gt;
&lt;td&gt;0x9&lt;/td&gt;
&lt;td&gt;传递较大HTTP头部时的持续帧&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2-请求优先级&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt; 请求优先级&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP/2&lt;/code&gt;允许每个流关联一个31&lt;code&gt;bit&lt;/code&gt;的优先值
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; 最高优先级&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2^31 -1&lt;/code&gt; 最低优先级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浏览器会基于资源的类型、在页面中的位置等因素，决定请求的优先次序&lt;/li&gt;
&lt;li&gt;服务器可以根据流的优先级，控制资源分配，优先将高优先级的帧发送给客户端&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP/2&lt;/code&gt;没有规定具体的优先级算法&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2-流量控制&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt; 流量控制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;流量控制有方向性，即接收方可能根据自己的情况为每个&lt;code&gt;流&lt;/code&gt;，乃至整个连接设置任意窗口大小&lt;/li&gt;
&lt;li&gt;连接建立后，客户端与服务器交换&lt;code&gt;SETTINGS&lt;/code&gt;帧，设置 双向的流量控制窗口大小&lt;/li&gt;
&lt;li&gt;流量控制窗口大小通过&lt;code&gt;WINDOW_UPDATE&lt;/code&gt;帧更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP/2&lt;/code&gt;流量控制和&lt;code&gt;TCP&lt;/code&gt;流量控制的机制相同，但&lt;code&gt;TCP&lt;/code&gt;流量控制不能对同一个连接内的多个&lt;code&gt;流&lt;/code&gt;实施差异化策略&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2-服务器端推送&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt; 服务器端推送&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;服务器可以对一个客户端请求发送多个响应&lt;/li&gt;
&lt;li&gt;服务器通过发送&lt;code&gt;PUSH_PROMISE&lt;/code&gt;帧来发起推送流&lt;/li&gt;
&lt;li&gt;客户端可以使用&lt;code&gt;HTTP header&lt;/code&gt;向服务器发送信号，列出它希望推送的资源&lt;/li&gt;
&lt;li&gt;服务器可以智能分析客户端的需求，自动推送关键资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221008652.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;server-push.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http-header压缩&#34;&gt;&lt;code&gt;HTTP header&lt;/code&gt;压缩&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP/2&lt;/code&gt;使用&lt;a class=&#34;link&#34; href=&#34;https://tools.ietf.org/html/rfc7541&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HPACK&lt;/a&gt;压缩格式压缩请求/响应头
&lt;ul&gt;
&lt;li&gt;通过静态霍夫曼码对发送的&lt;code&gt;header&lt;/code&gt;字段进行编码，减小了它们的传输大小&lt;/li&gt;
&lt;li&gt;客户端和服务器使用&lt;code&gt;索引表&lt;/code&gt;来维护和更新&lt;code&gt;header&lt;/code&gt;字段。对于相同的数据，不再重复发送&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http-header压缩-1&#34;&gt;&lt;code&gt;HTTP header&lt;/code&gt;压缩&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221009736.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;http header&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2-vs-http11&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt; vs &lt;code&gt;HTTP/1.1&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://http2.akamai.com/demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://http2.akamai.com/demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221010759.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;http2 vs http1&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2的升级与发现&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt;的升级与发现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP/1.x&lt;/code&gt;还将长期存在，客户端和服务器必须同时支持&lt;code&gt;1.x&lt;/code&gt;和&lt;code&gt;2.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;客户端和服务器在开始交换数据前，必须发现和协商使用哪个版本的协议进行通信&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP/2&lt;/code&gt;定义了两种协商机制
&lt;ul&gt;
&lt;li&gt;通过安全连接&lt;code&gt;TLS&lt;/code&gt;和&lt;code&gt;ALPN&lt;/code&gt;进行协商&lt;/li&gt;
&lt;li&gt;基于&lt;code&gt;TCP&lt;/code&gt;连接的协商机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2的升级与发现-1&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt;的升级与发现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP/2&lt;/code&gt;标准不要求必须基于&lt;code&gt;TLS&lt;/code&gt;，但浏览器要求必须基于&lt;code&gt;TLS&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Web上存在大量的代理和中间设备：缓存服务器、安全网关、加速器等等&lt;/li&gt;
&lt;li&gt;如果任何中间设备不支持，连接都不会成功&lt;/li&gt;
&lt;li&gt;建立&lt;code&gt;TLS&lt;/code&gt;信道，端到端加密传输，绕过中间代理，实现可靠的部署&lt;/li&gt;
&lt;li&gt;新协议一般都要依赖于建立&lt;code&gt;TLS&lt;/code&gt;信道，例如&lt;code&gt;WebSocket&lt;/code&gt;、&lt;code&gt;SPDY&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;h2和h2c升级协商机制&#34;&gt;&lt;code&gt;h2&lt;/code&gt;和&lt;code&gt;h2c&lt;/code&gt;升级协商机制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基于&lt;code&gt;TLS&lt;/code&gt;运行的&lt;code&gt;HTTP/2&lt;/code&gt;被称为&lt;code&gt;h2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;直接在&lt;code&gt;TCP&lt;/code&gt;之上运行的&lt;code&gt;HTTP/2&lt;/code&gt;被称为&lt;code&gt;h2c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221010059.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;h2-h2c&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;h2c演示环境&#34;&gt;&lt;code&gt;h2c&lt;/code&gt;演示环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;客户端测试工具 &lt;code&gt;curl&lt;/code&gt; (&amp;gt; 7.46.0)&lt;/li&gt;
&lt;li&gt;服务器端 &lt;code&gt;Tomcat 9.x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;Connector port=&amp;#34;8080&amp;#34; protocol=&amp;#34;HTTP/1.1&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           connectionTimeout=&amp;#34;20000&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           redirectPort=&amp;#34;8443&amp;#34; &amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;UpgradeProtocol 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            className=&amp;#34;org.apache.coyote.http2.Http2Protocol&amp;#34;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/Connector&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;h2c协议升级&#34;&gt;&lt;code&gt;h2c&lt;/code&gt;协议升级&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl http://localhost:8080 --http2 -v&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; GET / HTTP/1.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Host: localhost:8080
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; User-Agent: curl/7.64.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Accept: */*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Connection: Upgrade, HTTP2-Settings
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Upgrade: h2c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; HTTP2-Settings: AAMAAABkAARAAAAAAAIAAAAA
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; HTTP/1.1 101 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; Connection: Upgrade
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; Upgrade: h2c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;http2连接建立&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt;连接建立&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221011974.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;start-http2-connection&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2连接建立-1&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt;连接建立&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Magic帧
&lt;ul&gt;
&lt;li&gt;ASCII 编码，12字节&lt;/li&gt;
&lt;li&gt;何时发送?
&lt;ul&gt;
&lt;li&gt;接收到服务器发送来的 101 Switching Protocols后&lt;/li&gt;
&lt;li&gt;TLS 握手成功后&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Preface 内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221012484.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;magic-frame&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2连接建立-2&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt;连接建立&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;交换&lt;code&gt;settings&lt;/code&gt;帧(client -&amp;gt; server)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221012482.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;setting-frame&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2连接建立-3&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt;连接建立&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;交换&lt;code&gt;settings&lt;/code&gt;帧(server -&amp;gt; client)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221013497.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;setting-frame&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2连接建立-4&#34;&gt;&lt;code&gt;HTTP/2&lt;/code&gt;连接建立&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;settings&lt;/code&gt; ACK 帧 (client &amp;lt;-&amp;gt; server)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221013850.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;setting-frame&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tls协议的设计目标&#34;&gt;&lt;code&gt;TLS&lt;/code&gt;协议的设计目标&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;保密性&lt;/li&gt;
&lt;li&gt;完整性&lt;/li&gt;
&lt;li&gt;身份验证&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tls发展史&#34;&gt;&lt;code&gt;TLS&lt;/code&gt;发展史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1994年，NetScape 设计了&lt;code&gt;SSL&lt;/code&gt;协议(Secure Sockets Layer) 1.0，未正式发布&lt;/li&gt;
&lt;li&gt;1995年，NetScape 发布 &lt;code&gt;SSL&lt;/code&gt; 2.0&lt;/li&gt;
&lt;li&gt;1996年，发布&lt;code&gt;SSL&lt;/code&gt; 3.0&lt;/li&gt;
&lt;li&gt;1999年，IETF标准化了&lt;code&gt;SSL&lt;/code&gt;协议，更名为&lt;code&gt;TLS&lt;/code&gt;(Transport Layer Security)，发布&lt;code&gt;TLS&lt;/code&gt; 1.0&lt;/li&gt;
&lt;li&gt;2006年4月，IETF 工作组发布了&lt;code&gt;TLS&lt;/code&gt; 1.1&lt;/li&gt;
&lt;li&gt;2008年8月，IETF 工作组发布了&lt;code&gt;TLS&lt;/code&gt; 1.2&lt;/li&gt;
&lt;li&gt;2018年8月，&lt;code&gt;TLS&lt;/code&gt; 1.3正式发布&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tls-12-握手过程&#34;&gt;&lt;code&gt;TLS&lt;/code&gt; 1.2 握手过程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221014737.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tls-handshake&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;验证身份&lt;/li&gt;
&lt;li&gt;达成安全套件共识&lt;/li&gt;
&lt;li&gt;传递密钥&lt;/li&gt;
&lt;li&gt;加密通讯
非对称加密只在建立&lt;code&gt;TLS&lt;/code&gt;信道时使用，之后的通信使用握手时生成的共享密钥加密&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tls-安全密码套件&#34;&gt;&lt;code&gt;TLS&lt;/code&gt; 安全密码套件&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221015276.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;cipher-suites&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密钥交换算法
&lt;ul&gt;
&lt;li&gt;双方在完全没有对方任何预先信息，通过不安全信道创建密钥&lt;/li&gt;
&lt;li&gt;1976年，Diffie–Hellman key exchange，简称 DH&lt;/li&gt;
&lt;li&gt;基于椭圆曲线(Elliptic Curve)升级DH协议，ECDHE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;身份验证算法
&lt;ul&gt;
&lt;li&gt;非对称加密算法，Public Key Infrastructure(PKI)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对称加密算法、强度、工作模式
&lt;ul&gt;
&lt;li&gt;工作模式：将明文分成多个等长的&lt;code&gt;Block&lt;/code&gt;模块，对每个模块分别加解密&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hash签名算法&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tls13的握手优化&#34;&gt;&lt;code&gt;TLS&lt;/code&gt;1.3的握手优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.thesslstore.com/blog/explaining-ssl-handshake/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;An Overview of TLS 1.3 – Faster and More Secure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221015782.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tls-1.3-handshake-performance&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;测试tls的支持情况&#34;&gt;测试&lt;code&gt;TLS&lt;/code&gt;的支持情况&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ssllabs.com/ssltest/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ssllabs.com/ssltest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221016671.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tlstest width:850&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;application-layer-protocol-negotiation&#34;&gt;Application-Layer Protocol Negotiation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基于&lt;code&gt;TLS&lt;/code&gt;运行的&lt;code&gt;HTTP/2&lt;/code&gt;使用&lt;code&gt;ALPN&lt;/code&gt;扩展做协议协商&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端在&lt;code&gt;ClientHello&lt;/code&gt;消息中增加&lt;code&gt;ProtocolNameList&lt;/code&gt;字段，包含自己支持的应用协议&lt;/li&gt;
&lt;li&gt;服务器检查&lt;code&gt;ProtocolNameList&lt;/code&gt;字段，在&lt;code&gt;ServerHello&lt;/code&gt;消息中以&lt;code&gt;ProtocolName&lt;/code&gt;字段返回选中的协议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;TLS&lt;/code&gt;握手的同时协商应用协议，省掉了&lt;code&gt;HTTP&lt;/code&gt;的&lt;code&gt;Upgrade&lt;/code&gt;机制所需的额外往返时间&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;alpn&#34;&gt;ALPN&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221016783.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alpn&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;h2演示环境&#34;&gt;&lt;code&gt;h2&lt;/code&gt;演示环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;客户端：浏览器&lt;/li&gt;
&lt;li&gt;服务器端：&lt;code&gt;Tomcat 9.x&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Tomcat&lt;/code&gt;提供了三种不同的&lt;code&gt;TLS&lt;/code&gt;实现
&lt;ul&gt;
&lt;li&gt;Java运行时提供的&lt;code&gt;JSSE&lt;/code&gt;实现&lt;/li&gt;
&lt;li&gt;使用了&lt;code&gt;OpenSSL&lt;/code&gt;的&lt;code&gt;JSSE&lt;/code&gt;实现&lt;/li&gt;
&lt;li&gt;&lt;code&gt;APR&lt;/code&gt;实现，默认情况下使用&lt;code&gt;OpenSSL&lt;/code&gt;引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tomcat三种tls实现&#34;&gt;&lt;code&gt;Tomcat&lt;/code&gt;三种&lt;code&gt;TLS&lt;/code&gt;实现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JSSE
&lt;ul&gt;
&lt;li&gt;非常慢&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://tools.ietf.org/html/rfc7301&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ALPN&lt;/a&gt;是因为&lt;code&gt;HTTP/2&lt;/code&gt;才在2014年出现，JDK8不支持&lt;code&gt;ALPN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OpenSSL&lt;/code&gt;实现
&lt;ul&gt;
&lt;li&gt;只使用了&lt;code&gt;OpenSSL&lt;/code&gt;，没有使用其他本地代码(native socket, poller等)&lt;/li&gt;
&lt;li&gt;可以配合 NIO 和 NIO2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;APR&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;大量的native code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TLS&lt;/code&gt;同样使用了&lt;code&gt;OpenSSL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tls实现的性能对比&#34;&gt;&lt;code&gt;TLS&lt;/code&gt;实现的性能对比&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OpenSSL&lt;/code&gt;性能比纯Java实现好很多；使用&lt;code&gt;TLS&lt;/code&gt;可以不再需要&lt;code&gt;APR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Linux&lt;/code&gt;上&lt;code&gt;NIO.2&lt;/code&gt;是通过&lt;code&gt;epoll&lt;/code&gt;来模拟实现的&lt;a class=&#34;link&#34; href=&#34;https://github.com/openjdk/jdk/blob/6bab0f539fba8fb441697846347597b4a0ade428/src/java.base/linux/classes/sun/nio/ch/EPollPort.java&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;EPollPort.java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221017915.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;jsse-openssl&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;使用jsse&#34;&gt;使用&lt;code&gt;JSSE&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;生成private key和自签名证书
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;keytool -genkey -alias tomcat -keyalg RSA&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配置&lt;code&gt;server.xml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;Connector
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  protocol=&amp;#34;org.apache.coyote.http11.Http11NioProtocol&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  port=&amp;#34;8443&amp;#34; maxThreads=&amp;#34;200&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  sslImplementationName=
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &amp;#34;org.apache.tomcat.util.net.jsse.JSSEImplementation&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  scheme=&amp;#34;https&amp;#34; secure=&amp;#34;true&amp;#34; SSLEnabled=&amp;#34;true&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  keystoreFile=&amp;#34;${user.home}/.keystore&amp;#34; keystorePass=&amp;#34;changeit&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  clientAuth=&amp;#34;false&amp;#34; sslProtocol=&amp;#34;TLS&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;lt;UpgradeProtocol 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        className=&amp;#34;org.apache.coyote.http2.Http2Protocol&amp;#34; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/Connector&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;使用jsse-1&#34;&gt;使用&lt;code&gt;JSSE&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK8&lt;/code&gt;不支持&lt;code&gt;ALPN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;严重 [main]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;org.apache.coyote.http11.AbstractHttp11Protocol.configureUpgradeProtocol 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The upgrade handler [org.apache.coyote.http2.Http2Protocol] 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;for [h2] only supports upgrade via ALPN but has been configured 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;for the [&amp;#34;https-jsse-nio-8443&amp;#34;] connector that does not support ALPN.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK11&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;信息 [main] 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;org.apache.coyote.http11.AbstractHttp11Protocol.configureUpgradeProtocol 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The [&amp;#34;https-jsse-nio-8443&amp;#34;] connector has been configured to 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;support negotiation to [h2] via ALPN
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;使用openssl&#34;&gt;使用&lt;code&gt;OpenSSL&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;安装&lt;code&gt;tomcat-native&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;brew install tomcat-native&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配置&lt;code&gt;$CATALINA_HOME/bin/setenv.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CATALINA_OPTS=&amp;#34;$CATALINA_OPTS -Djava.library.path=/usr/local/opt/tomcat-native/lib&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;配置server.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;Connector
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    protocol=&amp;#34;org.apache.coyote.http11.Http11NioProtocol&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    sslImplementationName=
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;org.apache.tomcat.util.net.openssl.OpenSSLImplementation&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ... &amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/Connector&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;使用openssl-1&#34;&gt;使用&lt;code&gt;OpenSSL&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK8&lt;/code&gt; &amp;amp; &lt;code&gt;JDK11&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;信息 [main] 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;org.apache.coyote.http11.AbstractHttp11Protocol.configureUpgradeProtocol 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The [&amp;#34;https-openssl-nio-8443&amp;#34;] connector has been configured to 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;support negotiation to [h2] via ALPN
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;信息 [main] 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;org.apache.coyote.AbstractProtocol.start 开始协议处理句柄
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[&amp;#34;https-openssl-nio-8443&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;alpn协议协商&#34;&gt;&lt;code&gt;ALPN&lt;/code&gt;协议协商&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ClientHello&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221023075.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;client-hello&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;alpn协议协商-1&#34;&gt;&lt;code&gt;ALPN&lt;/code&gt;协议协商&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221024741.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ServerHello&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ServerHello&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;使用chrome开发者工具观察&#34;&gt;使用Chrome开发者工具观察&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221024873.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;chrome width:1000&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2的问题&#34;&gt;HTTP/2的问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP/2&lt;/code&gt;消除了&lt;code&gt;HTTP&lt;/code&gt;协议的队首阻塞现象，但&lt;code&gt;TCP&lt;/code&gt;层面上仍然存在队首阻塞&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP/2&lt;/code&gt;多请求复用一个&lt;code&gt;TCP&lt;/code&gt;连接，丢包可能会block住所有的&lt;code&gt;HTTP&lt;/code&gt;请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221025671.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;head-of-line&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http2的问题-1&#34;&gt;HTTP/2的问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TCP&lt;/code&gt;及&lt;code&gt;TCP+TLS&lt;/code&gt;建立连接需要多次round trips
&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221025218.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tcp-tls&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;quic&#34;&gt;QUIC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt;uick &lt;strong&gt;U&lt;/strong&gt;DP &lt;strong&gt;I&lt;/strong&gt;nternet &lt;strong&gt;C&lt;/strong&gt;onnections&lt;/li&gt;
&lt;li&gt;由Goolge开发，并已经在Google部署使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221026123.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;quic&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;quic-1&#34;&gt;QUIC&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=hQZ-0mXFmk8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;QUIC: next generation multiplexed transport over UDP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209221026039.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;google-live&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;参考资料&#34;&gt;参考资料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://hpbn.co/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;High Performance Browser Networking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://coolshell.cn/articles/19840.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTTP的前世今生&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.infoq.cn/article/x80uOvcRyxVYw3KVusUm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTTP/3 的过去、现在和未来&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://tools.ietf.org/html/rfc7540&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTTP/2协议&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>自己动手将谷歌k8s镜像同步到阿里云</title>
        <link>https://mazhen.tech/p/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%B0%86%E8%B0%B7%E6%AD%8Ck8s%E9%95%9C%E5%83%8F%E5%90%8C%E6%AD%A5%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91/</link>
        <pubDate>Thu, 06 Jun 2019 09:53:24 +0800</pubDate>
        
        <guid>https://mazhen.tech/p/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%B0%86%E8%B0%B7%E6%AD%8Ck8s%E9%95%9C%E5%83%8F%E5%90%8C%E6%AD%A5%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91/</guid>
        <description>&lt;p&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 相关的&lt;code&gt;docker&lt;/code&gt;镜像存放在Google的镜像仓库 &lt;a class=&#34;link&#34; href=&#34;https://cloud.google.com/container-registry/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;k8s.gcr.io&lt;/a&gt;，在国内网络环境内无法访问。有人已经将这些镜像同步到了阿里云，你可以在&lt;a class=&#34;link&#34; href=&#34;https://cr.console.aliyun.com/cn-shenzhen/instances/images&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;阿里云容器镜像服务&lt;/a&gt;中搜索到它们。几乎所有的k8s镜像都已经同步到了阿里云。&lt;a class=&#34;link&#34; href=&#34;https://www.aliyun.com/product/containerservice&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;阿里云容器服务&lt;/a&gt;团队甚至还有一个开源项目&lt;a class=&#34;link&#34; href=&#34;https://github.com/AliyunContainerService/sync-repo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;sync-repo&lt;/a&gt;，专门做&lt;code&gt;Docker Registry&lt;/code&gt;之间的同步。但是，如果你不放心别人同步的镜像，或者最新版本的镜像还没人同步过来，你可以按照本文将介绍的步骤，自己将&lt;code&gt;gcr.io&lt;/code&gt;上的&lt;code&gt;docker&lt;/code&gt;镜像搬到阿里云。&lt;/p&gt;
&lt;h2 id=&#34;安装配置shadowsocks客户端&#34;&gt;安装配置shadowsocks客户端&lt;/h2&gt;
&lt;p&gt;先简单介绍下&lt;code&gt;Shadowsocks&lt;/code&gt;协议，详细的工作原理可以参考&lt;a class=&#34;link&#34; href=&#34;https://www.desgard.com/Shadowsocks-1/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这篇博客&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209220955184.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ss&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;当我们启动&lt;code&gt;shadowsocks client&lt;/code&gt;时，实际上是启动了一个 &lt;code&gt;ss-local&lt;/code&gt; 进程，左侧绿色的 &lt;code&gt;Socks5 Client&lt;/code&gt; 可以是浏览器，也可以是&lt;code&gt;Telegram&lt;/code&gt;等本地应用，它们和&lt;code&gt;ss-local&lt;/code&gt;之间是使用 &lt;code&gt;socks&lt;/code&gt; 协议进行通信。也就是说，浏览器像连接普通 &lt;code&gt;socks&lt;/code&gt; 代理一样，连接到&lt;code&gt;ss-local&lt;/code&gt;进程。&lt;code&gt;ss-local&lt;/code&gt; 会将收到的请求，转发给&lt;code&gt;ss-server&lt;/code&gt;，由&lt;code&gt;ss-server&lt;/code&gt;完成实际的访问，并将结果通过&lt;code&gt;ss-local&lt;/code&gt;返回给浏览器。&lt;code&gt;ss-server&lt;/code&gt;部署在国内网络之外，和&lt;code&gt;ss-local&lt;/code&gt;之间是加密传输，这样就实现了跨越长城。其实防火长城已经能够识别&lt;code&gt;Shadowsocks&lt;/code&gt;协议，但发现我们是在努力学习先进技术，就先放我们过关。&lt;/p&gt;
&lt;p&gt;好了，我们现在首先要做的是在本机安装配置&lt;code&gt;shadowsocks&lt;/code&gt;客户端。推荐使用&lt;a class=&#34;link&#34; href=&#34;https://github.com/shadowsocks/shadowsocks-libev&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;shadowsocks-libev&lt;/a&gt;，纯C实现的&lt;code&gt;shadowsocks&lt;/code&gt;协议，已经在很多操作系统的官方&lt;code&gt;repository&lt;/code&gt;中 ，安装非常方便。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;macOS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;brew install shadowsocks-libev
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ubuntu&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt install shadowsocks-libev
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;接下来填写&lt;code&gt;shadowsocks client&lt;/code&gt;配置文件，&lt;code&gt;JSON&lt;/code&gt;格式，简单易懂：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;server&amp;#34;:&amp;#34;ss服务器IP&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;server_port&amp;#34;:443, // ss服务器port
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;local_port&amp;#34;:1080, // 本地监听端口
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;password&amp;#34;:&amp;#34;xxxx&amp;#34;, // ss服务器密码
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;timeout&amp;#34;:600,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;method&amp;#34;:&amp;#34;aes-256-cfb&amp;#34; // ss服务器加密方法
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;至于&lt;code&gt;shadowsocks&lt;/code&gt;服务器端，可以租用国内网络外的云主机自己搭建，也可以购买现成的&lt;a class=&#34;link&#34; href=&#34;https://www.emptyus.com/aff.php?uid=16723&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;机场服务&lt;/a&gt;，本文就不讨论了。&lt;/p&gt;
&lt;p&gt;然后启动&lt;code&gt;shadowsocks client&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nohup ss-local -c ss-client.conf &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;安装配置http代理&#34;&gt;安装配置HTTP代理&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shadowsocks client&lt;/code&gt;创建的是&lt;code&gt;socks5&lt;/code&gt;代理，不过一些程序无法使用 &lt;code&gt;socks5&lt;/code&gt; ，它们需要通过 &lt;code&gt;http_proxy&lt;/code&gt; 和 &lt;code&gt;https_proxy&lt;/code&gt; 环境变量，使用 &lt;code&gt;HTTP&lt;/code&gt; 代理。&lt;code&gt;polipo&lt;/code&gt; 可以帮助我们将 &lt;code&gt;socks5&lt;/code&gt; 代理转换为 &lt;code&gt;HTTP&lt;/code&gt; 代理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;macOS&lt;/code&gt;下安装&lt;code&gt;polipo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;brew install polipo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ubuntu&lt;/code&gt;下安装&lt;code&gt;polipo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt install polipo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 建议停掉polipo服务，需要的时候自己启动
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo systemctl stop polipo.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo systemctl disable  polipo.service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;启动&lt;code&gt;HTTP&lt;/code&gt;代理&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo polipo socksParentProxy=127.0.0.1:1080 proxyPort=1087
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;socksParentProxy&lt;/code&gt;配置为&lt;code&gt;localhost&lt;/code&gt;和&lt;code&gt;ss-local&lt;/code&gt;监听端口，&lt;code&gt;proxyPort&lt;/code&gt;是启动的&lt;code&gt;HTTP&lt;/code&gt;代理端口。&lt;/p&gt;
&lt;p&gt;我们可以在命令行终端测试&lt;code&gt;HTTP&lt;/code&gt;代理的效果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ export http_proxy=http://localhost:1087
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ export https_proxy=http://localhost:1087
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl https://www.google.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;应该可以正常访问到Google。&lt;/p&gt;
&lt;h2 id=&#34;设置docker-http代理&#34;&gt;设置Docker HTTP代理&lt;/h2&gt;
&lt;p&gt;如果是在&lt;code&gt;macOS&lt;/code&gt;上使用&lt;code&gt;Docker Desctop&lt;/code&gt;，可以在&lt;code&gt;Preference&lt;/code&gt;中的&lt;code&gt;Proxies&lt;/code&gt;设置上一步启动的HTTP代理：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209220957013.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;docker proxy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;如果是&lt;code&gt;Linux&lt;/code&gt;平台，请参考Docker的&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/config/daemon/systemd/#httphttps-proxy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方文档&lt;/a&gt;进行设置。&lt;/p&gt;
&lt;h2 id=&#34;在阿里云创建容器镜像的命名空间&#34;&gt;在阿里云创建容器镜像的命名空间&lt;/h2&gt;
&lt;p&gt;为了将镜像同步到阿里云，首先需要在阿里云的&lt;a class=&#34;link&#34; href=&#34;https://cr.console.aliyun.com/cn-shenzhen/instances/namespaces&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;容器镜像服务控制台&lt;/a&gt;创建镜像的命名空间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202209220958603.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;aliyun docker image namespace&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;建议将仓库类型设置为“公开”，这样其他人也能搜索、下载到镜像。&lt;/p&gt;
&lt;h2 id=&#34;从gcrio下载镜像&#34;&gt;从&lt;code&gt;gcr.io&lt;/code&gt;下载镜像&lt;/h2&gt;
&lt;p&gt;在本机从&lt;code&gt;gcr.io&lt;/code&gt;下载镜像，我们以镜像&lt;code&gt;pause:3.1&lt;/code&gt;为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull k8s.gcr.io/pause:3.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;给镜像标记新的tag&#34;&gt;给镜像标记新的&lt;code&gt;tag&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;根据前面在阿里云创建的命名空间，给镜像标记新的&lt;code&gt;tag&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker tag k8s.gcr.io/pause:3.1 registry.cn-shenzhen.aliyuncs.com/mz-k8s/pause:3.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;mz-k8s&lt;/code&gt;是在前面创建的命名空间。 查看tag结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker images
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;REPOSITORY                                       TAG                 IMAGE ID            CREATED             SIZE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;k8s.gcr.io/pause                                 3.1                 da86e6ba6ca1        17 months ago       742kB
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;registry.cn-shenzhen.aliyuncs.com/mz-k8s/pause   3.1                 da86e6ba6ca1        17 months ago       742kB
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过&lt;code&gt;IMAGE ID&lt;/code&gt;可以看出，两个镜像为同一个。&lt;/p&gt;
&lt;h2 id=&#34;将镜像上传到阿里云&#34;&gt;将镜像上传到阿里云&lt;/h2&gt;
&lt;p&gt;登录阿里云镜像仓库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker login --username=(阿里云账号) registry.cn-shenzhen.aliyuncs.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;根据提示输入password，登录成功后，显示Login Succeeded。&lt;/p&gt;
&lt;p&gt;上传镜像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker push registry.cn-shenzhen.aliyuncs.com/mz-k8s/pause:3.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;从阿里云下载镜像&#34;&gt;从阿里云下载镜像&lt;/h2&gt;
&lt;p&gt;现在可以在其他机器上从阿里云下载&lt;code&gt;pause:3.1&lt;/code&gt;镜像，这时候已经不需要科学上网了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker pull registry.cn-shenzhen.aliyuncs.com/mz-k8s/pause:3.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;给镜像打上原来的tag，这样&lt;code&gt;kubeadm&lt;/code&gt;等工具就可以使用本地仓库中的&lt;code&gt;pause:3.1&lt;/code&gt;镜像了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker tag registry.cn-shenzhen.aliyuncs.com/mz-k8s/pause:3.1 k8s.gcr.io/pause:3.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;至此，我们跨越长城，将一个docker镜像从&lt;code&gt;gcr.io&lt;/code&gt;搬到了&lt;code&gt;Aliyun&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果是需要批量、定时的从&lt;code&gt;gcr.io&lt;/code&gt;同步镜像，建议考虑使用阿里开源的&lt;a class=&#34;link&#34; href=&#34;https://github.com/AliyunContainerService/sync-repo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;sync-repo&lt;/a&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>容器技术创新漫谈</title>
        <link>https://mazhen.tech/p/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E5%88%9B%E6%96%B0%E6%BC%AB%E8%B0%88/</link>
        <pubDate>Sun, 16 Dec 2018 22:03:21 +0800</pubDate>
        
        <guid>https://mazhen.tech/p/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E5%88%9B%E6%96%B0%E6%BC%AB%E8%B0%88/</guid>
        <description>&lt;p&gt;&lt;code&gt;Kubernetes&lt;/code&gt;在2017年赢得了容器编排之战，使得基于&lt;code&gt;容器&lt;/code&gt;+&lt;code&gt;Kubernetes&lt;/code&gt;来构建&lt;code&gt;PaaS&lt;/code&gt;平台成为了云计算的主流方式。在人们把关注的目光都聚焦在&lt;code&gt;Kubernetes&lt;/code&gt;上时，容器技术领域在2018年也发生了很多创新，包括&lt;code&gt;amazon&lt;/code&gt;最近开源的轻量级虚拟机管理器 &lt;a class=&#34;link&#34; href=&#34;https://firecracker-microvm.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Firecracker&lt;/a&gt;，&lt;code&gt;Google&lt;/code&gt;在今年5月份开源的基于用户态操作系统内核的 &lt;a class=&#34;link&#34; href=&#34;https://github.com/google/gvisor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;gVisor&lt;/a&gt; 容器，还有更早开源的虚拟化容器项目 &lt;a class=&#34;link&#34; href=&#34;https://katacontainers.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;KataContainers&lt;/a&gt;，可谓百花齐放。一般的开发者可能认为容器就等于&lt;code&gt;Docker&lt;/code&gt;，没想到容器领域还在发生着这么多创新。我在了解这些项目时，发现如果没有一些背景知识，很难get到它们的创新点。我试着通过这篇文章进行一次背景知识的梳理。让我们先从最基本的问题开始：操作系统是怎么工作的？&lt;/p&gt;
&lt;h2 id=&#34;操作系统的工作方式&#34;&gt;操作系统的工作方式&lt;/h2&gt;
&lt;p&gt;我们不去讨论操作系统的标准定义，而是想想操作系统的本质是什么，它是怎么为应用提供服务的呢？&lt;/p&gt;
&lt;p&gt;其实操作系统很“懒”，它不是一直运行着主动干活，而是躺在那儿等着被中断“唤醒”，然后根据中断它的事件类型做下一步处理：是不是有键盘敲击、网络数据包到达，还是时间片到了该考虑进程切换，或者是有应用向内核发出了服务请求。内核处理完唤醒它的事件，会将控制权返还给应用程序，然后等着再次被中断“唤醒”。内核就是这样由中断驱动，控制着CPU、内存等硬件资源，为应用程序提供服务。&lt;/p&gt;
&lt;p&gt;”唤醒“操作系统内核的事件主要分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;中断&lt;/strong&gt;：来自硬件设备的处理请求；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异常&lt;/strong&gt;：当前正在执行的进程，由于非法指令或者其他原因导致执行失败而产生的异常事情处理请求，典型的如缺页异常；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统调用&lt;/strong&gt;：应用程序主动向操作系统内核发出的服务请求。系统调用的本质其实也是中断，相对于硬件设备的中断，这种中断被称为&lt;code&gt;软中断&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cpu的特权等级&#34;&gt;CPU的特权等级&lt;/h3&gt;
&lt;p&gt;内核代码常驻在内存中，被每个进程映射到它的&lt;strong&gt;逻辑地址空间&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112206004.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;space&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;进程&lt;code&gt;逻辑地址空间&lt;/code&gt;的最大长度与实际可用的物理内存数量无关，由&lt;code&gt;CPU&lt;/code&gt;的字长决定。进程的&lt;code&gt;逻辑地址空间&lt;/code&gt;划分为两个部分，分别称为&lt;code&gt;内核空间&lt;/code&gt;和&lt;code&gt;用户空间&lt;/code&gt;。&lt;code&gt;用户空间&lt;/code&gt;是彼此独立的，而逻辑地址空间顶部的&lt;code&gt;内核空间&lt;/code&gt;是被所有进程共享。&lt;/p&gt;
&lt;p&gt;从每个进程的角度来看，地址空间中只有自身一个进程，它不会感知到其他进程的存在。由于&lt;code&gt;内核空间&lt;/code&gt;被所有进程共享，为了防止进程修改彼此的数据而造成相互干扰，用户进程不能直接操作或读取&lt;code&gt;内核空间&lt;/code&gt;中的数据。同时由于内核管理着所有硬件资源，也不能让用户进程直接执行&lt;code&gt;内核空间&lt;/code&gt;中的代码。操作系统应该如何做到这种限制呢？&lt;/p&gt;
&lt;p&gt;实际上，操作系统的实现依赖 &lt;code&gt;CPU&lt;/code&gt; 提供的功能。现代的&lt;code&gt;CPU&lt;/code&gt;体系架构都提供几种特权级别，每个特权级别有各种限制。各级别可以看作是环，内环能够访问更多的功能，外环则较少，被称为&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Protection_ring&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;protection rings&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112207458.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Intel&lt;/code&gt; 的 &lt;code&gt;CPU&lt;/code&gt; 提供了4种特权级别， &lt;code&gt;Linux&lt;/code&gt; 只使用了 &lt;code&gt;Ring0&lt;/code&gt; 和 &lt;code&gt;Ring3&lt;/code&gt; 两个级别。&lt;code&gt;Ring 0&lt;/code&gt; 拥有最多的特权，它可以直接和CPU、内存等物理硬件交互。 &lt;code&gt;Ring 0&lt;/code&gt; 被称为&lt;code&gt;内核态&lt;/code&gt;，操作系统内核正是运行在&lt;code&gt;Ring 0&lt;/code&gt;。&lt;code&gt;Ring 3&lt;/code&gt;被称为&lt;code&gt;用户态&lt;/code&gt;，应用程序运行在&lt;code&gt;用户态&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;系统调用&#34;&gt;系统调用&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;用户态&lt;/code&gt;禁止直接访问&lt;code&gt;内核态&lt;/code&gt;，也就是说不同通过普通的函数调用方式调用内核代码，而必须使用&lt;strong&gt;系统调用&lt;/strong&gt;陷入（&lt;code&gt;trap&lt;/code&gt;）内核，完成从&lt;code&gt;用户态&lt;/code&gt;到&lt;code&gt;内核态&lt;/code&gt;的切换。内核首先检查进程是否允许执行想要的操作，然后代表进程执行所需的操作，完成后再返回到&lt;code&gt;用户态&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112207187.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;除了代表用户程序执行代码之外，内核还可以由硬件中断激活，然后在&lt;code&gt;中断上下文&lt;/code&gt;中运行。另外除了普通进程，系统中还有&lt;code&gt;内核线程&lt;/code&gt;在运行。&lt;code&gt;内核线程&lt;/code&gt;不与任何特定的用户空间进程相关联。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CPU&lt;/code&gt; 在任何时间点上的活动必然为下列三者之一 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行于用户空间，执行应用程序&lt;/li&gt;
&lt;li&gt;运行于内核空间，处于&lt;code&gt;进程上下文&lt;/code&gt;，即代表某个特定的进程执行&lt;/li&gt;
&lt;li&gt;运行于内核空间，处于&lt;code&gt;中断上下文&lt;/code&gt;，与任何进程无关，处理某个特定的中断&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化系统调用&#34;&gt;优化系统调用&lt;/h3&gt;
&lt;p&gt;从上面的讨论可以看出，由于&lt;code&gt;系统调用&lt;/code&gt;会经过&lt;code&gt;用户态&lt;/code&gt;到&lt;code&gt;内核态&lt;/code&gt;的切换，开销要比普通函数调用大很多，因此在进行系统级编程时，减少&lt;code&gt;用户态&lt;/code&gt;与&lt;code&gt;内核态&lt;/code&gt;之间的切换是一个很重要的优化方法。&lt;/p&gt;
&lt;p&gt;例如同样是实现 &lt;code&gt;Overlay网络&lt;/code&gt;，使用 &lt;code&gt;VXLAN&lt;/code&gt; 完全在内核态完成封装和解封装，要比把数据包从内核态通过虚拟设备&lt;code&gt;TUN&lt;/code&gt;传入用户态再进行处理要高效很多。&lt;/p&gt;
&lt;p&gt;对应的也可以从另外一个方向进行优化：使用 &lt;a class=&#34;link&#34; href=&#34;https://www.dpdk.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DPDK&lt;/a&gt; 跳过内核网络协议栈，数据从网卡直接到达用户态，在用户态处理数据包，也就是说网络协议栈完全运行在用户态，同样避免了&lt;code&gt;用户态&lt;/code&gt;和&lt;code&gt;内核态&lt;/code&gt;的切换。像腾讯开源的 &lt;a class=&#34;link&#34; href=&#34;https://github.com/f-stack/f-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;F-Stack&lt;/a&gt;就是一个基于&lt;a class=&#34;link&#34; href=&#34;https://www.dpdk.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DPDK&lt;/a&gt;运行在用户空间的TCP/IP协议栈。&lt;/p&gt;
&lt;p&gt;了解了操作系统内核的基本工作方式，我们再看下一个话题：&lt;strong&gt;虚拟化&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;虚拟化技术&#34;&gt;虚拟化技术&lt;/h2&gt;
&lt;p&gt;为了更高效灵活的使用硬件资源，同时能够实现服务间的安全隔离，我们需要虚拟化技术。运行虚拟化软件（&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Hypervisor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hypervisor&lt;/a&gt;或者叫&lt;code&gt;VMM&lt;/code&gt;，virtual machine monitor）的物理设施我们称之为&lt;code&gt;Host&lt;/code&gt;，安装在&lt;code&gt;Hypervisor&lt;/code&gt;之上的虚拟机称为&lt;code&gt;Guest&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;根据&lt;code&gt;Hypervisor&lt;/code&gt;在系统中的位置，可以将它归类为&lt;code&gt;type-1&lt;/code&gt;或&lt;code&gt;type-2&lt;/code&gt;型。如果&lt;code&gt;hypervisor&lt;/code&gt;直接运行在硬件之上，它通常被认为是&lt;code&gt;Type-1&lt;/code&gt;型。如果&lt;code&gt;hypervisor&lt;/code&gt;作为一个单独的层运行在操作系统之上，它将被认为是&lt;code&gt;Type 2&lt;/code&gt;型。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Type-1&lt;/code&gt;型&lt;code&gt;Hypervisor&lt;/code&gt;的概念图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112208073.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Type-2&lt;/code&gt;型&lt;code&gt;Hypervisor&lt;/code&gt;的概念图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112209569.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;kvm--qemu&#34;&gt;KVM &amp;amp; QEMU&lt;/h3&gt;
&lt;p&gt;实际上&lt;code&gt;Type-1&lt;/code&gt;和&lt;code&gt;Type-2&lt;/code&gt;并没有严格的区分，像最常见的虚拟化软件 &lt;a class=&#34;link&#34; href=&#34;https://www.linux-kvm.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;KVM&lt;/a&gt;（Kernel-based Virtual Machine）是一个&lt;code&gt;Linux&lt;/code&gt;内核模块，加载&lt;code&gt;KVM&lt;/code&gt;后&lt;code&gt;Linux&lt;/code&gt;内核就转换成了&lt;code&gt;Type-1 hypervisor&lt;/code&gt;。同时，&lt;code&gt;Linux&lt;/code&gt;还是一个通用的操作系统，也可以认为&lt;code&gt;KVM&lt;/code&gt;是运行在&lt;code&gt;Linux&lt;/code&gt;之上的&lt;code&gt;Type-2 hypervisor&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;为了在&lt;code&gt;Host&lt;/code&gt;上创建出虚拟机，仅仅有&lt;code&gt;KVM&lt;/code&gt;是不够的。对于 &lt;code&gt;I/O&lt;/code&gt; 的仿真，&lt;code&gt;KVM&lt;/code&gt; 还需要 &lt;a class=&#34;link&#34; href=&#34;https://www.qemu.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;QEMU&lt;/a&gt;的配合。&lt;code&gt;QEMU&lt;/code&gt; 是一个运行在用户空间程序，它可以仿真处理器和一系列的物理设备：磁盘、网络、&lt;code&gt;VGA&lt;/code&gt;、&lt;code&gt;PCI&lt;/code&gt;、&lt;code&gt;USB&lt;/code&gt;、串口/并口等等，基于&lt;code&gt;QEMU&lt;/code&gt;可以构造出一个完整的虚拟PC。&lt;/p&gt;
&lt;p&gt;值得注意的是，&lt;code&gt;QEMU&lt;/code&gt; 有两种运行模式：&lt;code&gt;仿真模式&lt;/code&gt;和&lt;code&gt;虚拟化模式&lt;/code&gt;。在仿真模式下，&lt;code&gt;QEMU&lt;/code&gt;可以在一个&lt;code&gt;Intel&lt;/code&gt;的&lt;code&gt;Host&lt;/code&gt;上运行&lt;code&gt;ARM&lt;/code&gt;或&lt;code&gt;MIPS&lt;/code&gt;虚拟机。这是怎么做到的呢？实际上，&lt;code&gt;QEMU&lt;/code&gt; 通过 &lt;code&gt;TCG&lt;/code&gt;（&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/QEMU#Tiny_Code_Generator&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tiny Code Generator&lt;/a&gt;）技术进行了二进制代码转换，可以认为这是一种高级语言的&lt;code&gt;VM&lt;/code&gt;，就像&lt;code&gt;JVM&lt;/code&gt;。例如可以将运行在&lt;code&gt;ARM&lt;/code&gt;上的二进制转换为一种中间字节码，然后让它运行在&lt;code&gt;Host&lt;/code&gt;的&lt;code&gt;Intel CPU&lt;/code&gt;上。很明显，这种二进制代码转换有着巨大的性能开销。&lt;/p&gt;
&lt;p&gt;相对应的，&lt;code&gt;QEMU&lt;/code&gt;的另一种是虚拟化模式，它借助&lt;code&gt;KVM&lt;/code&gt;完成处理器的虚拟化。由于和CPU的体系结构紧密关联，虚拟化模式能够带来更好的性能，限制是&lt;code&gt;Guest&lt;/code&gt;必须使用和&lt;code&gt;Host&lt;/code&gt;一样的CPU体系机构。这就是我们最常用到的虚拟化技术栈：&lt;code&gt;KVM/QEMU&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112209527.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;KVM&lt;/code&gt; 和 &lt;code&gt;QEMU&lt;/code&gt; 有两种交互方式：通过设备文件&lt;code&gt;/dev/kvm&lt;/code&gt; 和通过内存映射页面。&lt;code&gt;QEMU&lt;/code&gt; 和 &lt;code&gt;KVM&lt;/code&gt;之间的大块数据传递会使用内存映射页面。&lt;code&gt;/dev/kvm&lt;/code&gt;是&lt;code&gt;KVM&lt;/code&gt;暴露的主要API，它支持一系列&lt;code&gt;ioctl&lt;/code&gt;接口，&lt;code&gt;QEMU&lt;/code&gt; 使用这些接口和&lt;code&gt;KVM&lt;/code&gt;交互。&lt;code&gt;/dev/kvm&lt;/code&gt; API分为三个层次：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;System Level&lt;/strong&gt;: 用于&lt;code&gt;KVM&lt;/code&gt;全局状态的维护，例如创建 &lt;code&gt;VM&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VM Level&lt;/strong&gt;: 用于处理和特定&lt;code&gt;VM&lt;/code&gt;相关工作的 API，&lt;code&gt;vCPU&lt;/code&gt; 就是通过这个级别的API创建出来的；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vCPU Level&lt;/strong&gt;: 这是最细粒度的API，用于和特定&lt;code&gt;vCPU&lt;/code&gt;的交互。&lt;code&gt;QEMU&lt;/code&gt;会为每个&lt;code&gt;vCPU&lt;/code&gt;分配一个专门的线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cpu-虚拟化技术-vt-x&#34;&gt;CPU 虚拟化技术 VT-x&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;KVM&lt;/code&gt;和&lt;code&gt;QEMU&lt;/code&gt;配合完美，但和&lt;code&gt;CPU&lt;/code&gt;的特权级别在一起就遇到了麻烦。我们知道，&lt;code&gt;hypervisor&lt;/code&gt;需要管理宿主机的&lt;code&gt;CPU&lt;/code&gt;、内存、&lt;code&gt;I/O&lt;/code&gt;设备等资源，因此它需要运行在&lt;code&gt;ring 0&lt;/code&gt;级别才能执行这些高特权操作。然而运行在&lt;code&gt;VM&lt;/code&gt;中的操作系统希望得到访问所有资源的权限，它并不知道自己运行在虚拟机中。因为同一时间只有一个内核可以运行在&lt;code&gt;ring 0&lt;/code&gt;，&lt;code&gt;Guest OS&lt;/code&gt;不得不被“挤”到了&lt;code&gt;ring 1&lt;/code&gt;，这一级别不能满足内核的需求。怎么解决？&lt;/p&gt;
&lt;p&gt;虽然我们可以使用软件的方式进行模拟，让&lt;code&gt;hypervisor&lt;/code&gt;拦截应用发往&lt;code&gt;ring 0&lt;/code&gt;的系统调用，再转发给&lt;code&gt;Guest OS&lt;/code&gt;，但这么做会产生额外的性能损耗，而且方案复杂难以维护。&lt;code&gt;Intel&lt;/code&gt;和&lt;code&gt;AMD&lt;/code&gt;认识到了虚拟化的重要性，各自独立创建了&lt;code&gt;X86&lt;/code&gt;架构的扩展指令集，分别称为 &lt;code&gt;VT-x&lt;/code&gt; and &lt;code&gt;AMD-V&lt;/code&gt;，从&lt;code&gt;CPU&lt;/code&gt;层面支持虚拟化。&lt;/p&gt;
&lt;p&gt;以&lt;code&gt;Intel&lt;/code&gt; CPU为例，&lt;code&gt;VT-x&lt;/code&gt;不仅增加了虚拟化相关的指令集，还将CPU的指令划分会两种模式：&lt;code&gt;root&lt;/code&gt; 和 &lt;code&gt;non-root&lt;/code&gt;。&lt;code&gt;hypervisor&lt;/code&gt;运行在 &lt;code&gt;root&lt;/code&gt; 模式，而&lt;code&gt;VM&lt;/code&gt;运行在&lt;code&gt;non-root&lt;/code&gt;模式。指令在&lt;code&gt;non-root&lt;/code&gt;模式的运行速度和&lt;code&gt;root&lt;/code&gt;模式几乎一样，除了不能执行一些涉及CPU全局状态切换的指令。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112210555.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;vt-x&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;VMX&lt;/code&gt;（Virtual Machine Extensions）是增加到&lt;code&gt;VT-x&lt;/code&gt;中的指令集，主要有四个指令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;VMXON&lt;/strong&gt;：在这个指令执行之前，CPU还没有&lt;code&gt;root&lt;/code&gt; 和 &lt;code&gt;non-root&lt;/code&gt;的概念。&lt;code&gt;VMXON&lt;/code&gt;执行后，CPU进入虚拟化模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VMXOFF&lt;/strong&gt;：&lt;code&gt;VMXON&lt;/code&gt;的相反操作，执行&lt;code&gt;VMXOFF&lt;/code&gt;退出虚拟化模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VMLAUNCH&lt;/strong&gt;：创建一个&lt;code&gt;VM&lt;/code&gt;实例，然后进入&lt;code&gt;non-root&lt;/code&gt;模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VMRESUME&lt;/strong&gt;：进入&lt;code&gt;non-root&lt;/code&gt;模式，恢复前面退出的&lt;code&gt;VM&lt;/code&gt;实例。当&lt;code&gt;VM&lt;/code&gt;试图执行一个在&lt;code&gt;non-root&lt;/code&gt;禁止的指令，CPU立即切换到root模式，类似前面介绍的系统调用&lt;code&gt;trap&lt;/code&gt;方式，这就是&lt;code&gt;VM&lt;/code&gt;的退出。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样，&lt;code&gt;VT-x/KVM/QEMU&lt;/code&gt; 构成了今天应用最广泛的虚拟化技术栈。&lt;/p&gt;
&lt;p&gt;有了上面的铺垫，终于要谈到容器技术了。&lt;/p&gt;
&lt;h2 id=&#34;容器的本质&#34;&gt;容器的本质&lt;/h2&gt;
&lt;p&gt;虽然虚拟化技术在灵活高效的使用硬件资源方面前进了一大步，但人们还觉得远远不够。特别是在机器使用量巨大的互联网公司。因为虚拟机一旦创建，为它分配的资源就相对固定，缺乏弹性，很难再提高机器的利用率。而且创建、销毁虚拟机也是相对“重”的操作。这时候容器技术出现了。我们知道，容器依赖的底层技术，&lt;code&gt;Linux Namesapce&lt;/code&gt;和&lt;code&gt;Cgroups&lt;/code&gt;都是最早由Google开发，提交进Linux内核的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器&lt;/strong&gt;的本质就是一个进程，只不过对它进行了&lt;code&gt;Linux Namesapce&lt;/code&gt;隔离，让它“看”不到外面的世界，用&lt;code&gt;Cgroups&lt;/code&gt;限制了它能使用的资源，同时利用系统调用&lt;code&gt;pivot_root&lt;/code&gt;或&lt;code&gt;chroot&lt;/code&gt;切换了进程的根目录，把容器镜像挂载为根文件系统&lt;code&gt;rootfs&lt;/code&gt;。&lt;code&gt;rootfs&lt;/code&gt;中不仅有要运行的应用程序，还包含了应用的所有依赖库，以及操作系统的目录和文件。&lt;code&gt;rootfs&lt;/code&gt;打包了应用运行的完整环境，这样就保证了在开发、测试、线上等多个场景的一致性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112142723.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;docker&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;从上图可以看出，容器和虚拟机的最大区别就是，每个虚拟机都有独立的操作系统内核&lt;code&gt;Guest OS&lt;/code&gt;，而容器只是一种特殊的进程，它们共享同一个操作系统内核。&lt;/p&gt;
&lt;p&gt;看清了容器的本质，很多问题就容易理解。例如我们执行 &lt;code&gt;docker exec&lt;/code&gt; 命令能够进入运行中的容器，好像登录进独立的虚拟机一样。实际上这只不过是利用系统调用&lt;code&gt;setns&lt;/code&gt;，让当前进程进入到容器进程的&lt;code&gt;Namesapce&lt;/code&gt;中，它就能“看到”容器内部的情况了。&lt;/p&gt;
&lt;p&gt;由于容器就是进程，它的创建、销毁非常轻量，对资源的使用控制更加灵活，因此让&lt;code&gt;Kubernetes&lt;/code&gt;这种容器编排和资源调度工具可以大显身手，通过合理的搭配，极大的提高了整个集群的资源利用率。&lt;/p&gt;
&lt;h2 id=&#34;虚拟化容器技术&#34;&gt;虚拟化容器技术&lt;/h2&gt;
&lt;p&gt;前面提到，运行在一个宿主机上的所有容器共享同一个操作系统内核，这种隔离级别存在着很大的潜在安全风险。因此在公有云的多租户场景下，还是需要先用虚拟机进行租户强隔离，然后用户在虚拟机上再使用容器+&lt;code&gt;Kubernetes&lt;/code&gt;部署应用。&lt;/p&gt;
&lt;p&gt;然而在&lt;code&gt;Serverless&lt;/code&gt;的场景下，传统的先建虚拟机再创建容器的方式，在灵活性、执行效率方面难以满足需求。随着&lt;code&gt;Serverless&lt;/code&gt;、&lt;code&gt;FaaS&lt;/code&gt;（Function-as-a-Service）的兴起，各公有云厂商都将安全性容器作为了创新焦点。&lt;/p&gt;
&lt;p&gt;一个很自然能想到的方案，是结合虚拟机的强隔离安全性+容器的轻量灵活性，这就是虚拟化容器项目 &lt;a class=&#34;link&#34; href=&#34;https://katacontainers.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;KataContainers&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.openstack.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenStack&lt;/a&gt;在2017年底发布的 &lt;code&gt;KataContainers&lt;/code&gt; 项目，最初是由 &lt;code&gt;Intel ClearContainer&lt;/code&gt; 和 &lt;code&gt;Hyper runV&lt;/code&gt; 两个项目合并而产生的。在&lt;code&gt;Kubernetes&lt;/code&gt;场景下，一个&lt;code&gt;Pod&lt;/code&gt;对应于&lt;code&gt;Kata Containers&lt;/code&gt;启动的一个轻量化虚拟机，&lt;code&gt;Pod&lt;/code&gt;中的容器，就是运行在这个轻量级虚拟机里的进程。每个&lt;code&gt;Pod&lt;/code&gt;都运行在独立的操作系统内核上，从而达到安全隔离的目的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112211690.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看出，&lt;code&gt;KataContainers&lt;/code&gt; 依赖 &lt;code&gt;KVM/QEMU&lt;/code&gt;技术栈。&lt;/p&gt;
&lt;p&gt;amazon最近开源的&lt;a class=&#34;link&#34; href=&#34;https://firecracker-microvm.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Firecracker&lt;/a&gt;也是为了实现在 functions-based services 场景下，多租户安全隔离的容器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112212515.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Firecracker&lt;/code&gt;同样依赖&lt;code&gt;KVM&lt;/code&gt;，然后它没有用到&lt;code&gt;QEMU&lt;/code&gt;，因为&lt;code&gt;Firecracker&lt;/code&gt;本身就是&lt;code&gt;QEMU&lt;/code&gt;的替代实现。&lt;code&gt;Firecracker&lt;/code&gt;是一个比&lt;code&gt;QEMU&lt;/code&gt;更轻量级的&lt;code&gt;VMM&lt;/code&gt;，它只仿真了4个设备：&lt;code&gt;virtio-net&lt;/code&gt;，&lt;code&gt;virtio-block&lt;/code&gt;，&lt;code&gt;serial console&lt;/code&gt;和一个按钮的键盘，仅仅用来停止&lt;code&gt;microVM&lt;/code&gt;。理论上，&lt;code&gt;KataContainers&lt;/code&gt;可以用&lt;code&gt;Firecracker&lt;/code&gt;换掉它现在使用的&lt;code&gt;QEMU&lt;/code&gt;，从而将 &lt;code&gt;Firecracker&lt;/code&gt;整合进&lt;code&gt;Kubernetes&lt;/code&gt;生态圈。&lt;/p&gt;
&lt;p&gt;其实Google早就没有使用&lt;code&gt;QEMU&lt;/code&gt;，而且对&lt;code&gt;KVM&lt;/code&gt;进行了深度定制。我们可以从这篇介绍看出端倪：&lt;a class=&#34;link&#34; href=&#34;https://cloud.google.com/blog/products/gcp/7-ways-we-harden-our-kvm-hypervisor-at-google-cloud-security-in-plaintext&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;7 ways we harden our KVM hypervisor at Google Cloud: security in plaintext&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Non-QEMU implementation: Google does not use QEMU, the user-space virtual machine monitor and hardware emulation. Instead, we wrote our own user-space virtual machine monitor that has the following security advantages over QEMU&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;gvisor&#34;&gt;gVisor&lt;/h2&gt;
&lt;p&gt;Google 开源的&lt;a class=&#34;link&#34; href=&#34;https://github.com/google/gvisor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;gVisor&lt;/a&gt;为了实现安全容器另辟蹊径，它用 Go 实现了一个运行在用户态的操作系统内核，作为容器运行的&lt;code&gt;Guest Kernel&lt;/code&gt;，每个容器都依赖独立的操作系统内核，实现了容器间安全隔离的目的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112213958.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;gVisor&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;虽然 &lt;code&gt;gVisor&lt;/code&gt; 今年才开源，但它已经在&lt;a class=&#34;link&#34; href=&#34;https://cloud.google.com/appengine/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google App Engine&lt;/a&gt; 和 &lt;a class=&#34;link&#34; href=&#34;https://cloud.google.com/functions/docs/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google Cloud Functions&lt;/a&gt;运行了多年。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112213737.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gVisor&lt;/code&gt;作为运行应用的安全沙箱，扮演着&lt;code&gt;Virtual kernel&lt;/code&gt;的角色。同时&lt;code&gt;gVisor&lt;/code&gt; 包含了一个兼容&lt;a class=&#34;link&#34; href=&#34;https://www.opencontainers.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Open Container Initiative (OCI)&lt;/a&gt; 的运行时&lt;code&gt;runsc&lt;/code&gt;，因此可以用它替换掉 Docker 的 &lt;code&gt;runc&lt;/code&gt;，整合进&lt;code&gt;Kubernetes&lt;/code&gt;生态圈，为&lt;code&gt;Kubernetes&lt;/code&gt;带来另一种安全容器的实现方案。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Kata Containers&lt;/code&gt;和&lt;code&gt;gVisor&lt;/code&gt;的本质都是为容器提供一个独立的操作系统内核，避免容器共享宿主机的内核而产生安全风险。&lt;code&gt;KataContainers&lt;/code&gt;使用了传统的虚拟化技术，&lt;code&gt;gVisor&lt;/code&gt;则自己实现了一个运行在用户态、极小的内核。&lt;code&gt;gVisor&lt;/code&gt;比&lt;code&gt;KataContainers&lt;/code&gt;更加轻量级，根据这个&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=pWyJahTWa4I&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分享&lt;/a&gt;的介绍，&lt;code&gt;gVisor&lt;/code&gt;目前只实现了211个Linux系统调用，启动时间150ms，内存占用15MB。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gVisor&lt;/code&gt;实现原理，简单来说是模拟内核的行为，使用某种方式拦截应用发起的系统调用，经过&lt;code&gt;gVisor&lt;/code&gt;的安全控制，代替容器进程向宿主机发起可控的系统调用。目前&lt;code&gt;gVisor&lt;/code&gt;实现了两种拦截方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Ptrace&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Ptrace&lt;/a&gt; 机制的拦截&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;KVM&lt;/code&gt; 来进行系统调用拦截。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为&lt;code&gt;gVisor&lt;/code&gt;基于拦截系统调用的实现原理，它并不适合系统调用密集的应用。&lt;/p&gt;
&lt;p&gt;最后，对于像我这样没有读过Linux内核代码的后端程序员，&lt;code&gt;gVisor&lt;/code&gt;是一个很好的窥探内核内部实现的窗口，又激起了我研究内核的兴趣。Twitter上看到有人和我有类似的看法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112214087.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;希望下次能分享&lt;code&gt;gVisor&lt;/code&gt;深入研究系列。保持好奇心，Stay hungry. Stay foolish.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Docker跨主机通信路由模式动手实验</title>
        <link>https://mazhen.tech/p/docker%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F%E5%8A%A8%E6%89%8B%E5%AE%9E%E9%AA%8C/</link>
        <pubDate>Sun, 11 Nov 2018 22:00:22 +0800</pubDate>
        
        <guid>https://mazhen.tech/p/docker%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F%E5%8A%A8%E6%89%8B%E5%AE%9E%E9%AA%8C/</guid>
        <description>&lt;p&gt;容器的跨主机通信主要有两种方式：封包模式和路由模式。&lt;a class=&#34;link&#34; href=&#34;https://mazhen.tech/docker-overlay-networks&#34; &gt;上一篇文章&lt;/a&gt;演示了使用&lt;code&gt;VXLAN&lt;/code&gt;协议的封包模式，这篇将介绍另一种方式，利用三层网络的路由转发实现容器的跨主机通信。&lt;/p&gt;
&lt;h2 id=&#34;路由模式概述&#34;&gt;路由模式概述&lt;/h2&gt;
&lt;p&gt;宿主机将它负责的容器IP网段，以某种方式告诉其他节点，然后每个节点根据收到的&lt;code&gt;&amp;lt;宿主机-容器IP网段&amp;gt;&lt;/code&gt;映射关系，配置本机路由表。&lt;/p&gt;
&lt;p&gt;这样对于容器间跨节点的IP包，就可以根据本机路由表获得到达目的容器的网关地址，即目的容器所在的宿主机地址。接着在把IP包封装成二层网络数据帧时，将目的MAC地址设置为网关的MAC地址，IP包就可以通过二层网络送达目的容器所在的宿主机。&lt;/p&gt;
&lt;p&gt;至于用什么方式将&lt;code&gt;&amp;lt;宿主机-容器IP网段&amp;gt;&lt;/code&gt;映射关系发布出去，不同的项目采用了不同的实现方案。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/coreos/flannel&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flannel&lt;/a&gt;是将这些信息集中存储在&lt;a class=&#34;link&#34; href=&#34;https://github.com/etcd-io/etcd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;etcd&lt;/a&gt;中，每个节点从&lt;a class=&#34;link&#34; href=&#34;https://github.com/etcd-io/etcd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;etcd&lt;/a&gt;自动获取数据，更新宿主机路由表。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/projectcalico/calico/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Calico&lt;/a&gt;则使用&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Border_Gateway_Protocol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;BGP&lt;/a&gt;（Border Gateway Protocol）协议交换共享路由信息，每个宿主机都是运行在它之上的容器的&lt;code&gt;边界网关&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果宿主机之间跨了网段怎么办？宿主机之间的二层网络不通，虽然知道目的容器所在的宿主机，但没办法将目的MAC地址设置为那台宿主机的MAC地址。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Calico&lt;/code&gt;有两种解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IPIP 模式，在跨网段的宿主机之间建立“隧道”&lt;/li&gt;
&lt;li&gt;让宿主机之间的路由器“学习”到容器路由规则，每个路由器都知道某个容器IP网段是哪个宿主机负责的，容器间的IP包就能正常路由了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;动手实验&#34;&gt;动手实验&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112201327.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;route&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;路由模式的实验比较简单，关键在于宿主机上路由规则的配置。为了简化实验，这些路由规则都是我们手工配置，而且两个节点之间二层网络互通，没有跨网段。&lt;/p&gt;
&lt;p&gt;参照&lt;a class=&#34;link&#34; href=&#34;https://mazhen.tech/docker-overlay-networks&#34; &gt;Docker跨主机Overlay网络动手实验&lt;/a&gt;，创建“容器”，&lt;code&gt;veth pairs&lt;/code&gt;，&lt;code&gt;bridge&lt;/code&gt;，设置IP，激活虚拟设备。&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;node-1&lt;/code&gt;上增加路由规则：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip route add 172.18.20.0/24 via 192.168.31.192
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在&lt;code&gt;node-2&lt;/code&gt;上增加路由规则：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip route add 172.18.10.0/24 via 192.168.31.183
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当&lt;code&gt;docker1&lt;/code&gt;访问&lt;code&gt;docker2&lt;/code&gt;时，IP包会从&lt;code&gt;veth&lt;/code&gt;到达&lt;code&gt;br0&lt;/code&gt;，然后根据&lt;code&gt;node-1&lt;/code&gt;上刚设置的路由规则，访问&lt;code&gt;172.18.20.0/24&lt;/code&gt;网段的网关地址为&lt;code&gt;node-2&lt;/code&gt;，这样，IP包就能路由到&lt;code&gt;node-2&lt;/code&gt;了。&lt;/p&gt;
&lt;p&gt;同时，&lt;code&gt;node-2&lt;/code&gt;的路由表中包含这样的一条规则：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ip route
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;172.18.20.0/24 dev br0 proto kernel scope link src 172.18.20.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;到达&lt;code&gt;node-2&lt;/code&gt;的IP包，会根据这条规则路由到网桥&lt;code&gt;br0&lt;/code&gt;，最终到达&lt;code&gt;docker-2&lt;/code&gt;。反过来从&lt;code&gt;docker2&lt;/code&gt;访问&lt;code&gt;docker1&lt;/code&gt;的过程也是类似。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;两种容器跨主机的通信方案我们都实验了一下，现在做个简单总结对比：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;封包模式&lt;/strong&gt;对基础设施要求低，三层网络通就可以了。但封包、解包带来的性能损耗较大。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由模式&lt;/strong&gt;性能好，但要求二层网络连通，或者在跨网段的情况下，要求路由器能配合“学习”路由规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此，容器网络的三篇系列完成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mazhen.tech/docker-network-bridge&#34; &gt;Docker单机网络模型动手实验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mazhen.tech/docker-overlay-networks&#34; &gt;Docker跨主机Overlay网络动手实验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker跨主机通信路由模式动手实验（本篇）&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Docker跨主机Overlay网络动手实验</title>
        <link>https://mazhen.tech/p/docker%E8%B7%A8%E4%B8%BB%E6%9C%BAoverlay%E7%BD%91%E7%BB%9C%E5%8A%A8%E6%89%8B%E5%AE%9E%E9%AA%8C/</link>
        <pubDate>Wed, 07 Nov 2018 21:52:36 +0800</pubDate>
        
        <guid>https://mazhen.tech/p/docker%E8%B7%A8%E4%B8%BB%E6%9C%BAoverlay%E7%BD%91%E7%BB%9C%E5%8A%A8%E6%89%8B%E5%AE%9E%E9%AA%8C/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mazhen.tech/docker-network-bridge&#34; &gt;上一篇文章&lt;/a&gt;我演示了&lt;code&gt;docker bridge&lt;/code&gt;网络模型的实验，这次我将展示如何利用&lt;code&gt;Overlay 网络&lt;/code&gt;实现跨主机容器的通信。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112154262.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;cross nodes&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;两个容器&lt;code&gt;docker1&lt;/code&gt;和&lt;code&gt;docker2&lt;/code&gt;分别位于节点&lt;code&gt;Node-1&lt;/code&gt;和&lt;code&gt;Node-2&lt;/code&gt;，如何实现容器的跨主机通信呢？一般来说有两种实现方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封包模式：利用&lt;code&gt;Overlay&lt;/code&gt;网络协议在节点间建立“隧道”，容器之间的网络包被封装在外层的网络协议包中进行传输。&lt;/li&gt;
&lt;li&gt;路由模式：容器间的网络包传输全部用三层网络的路由转发来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文主要介绍封包模式。&lt;code&gt;Overlay&lt;/code&gt;网络主要有两种方式，一种是使用UDP在用户态封装，一种是利用&lt;code&gt;VXLAN&lt;/code&gt; 在内核态封装。由于减少了用户态到内核态的切换，封包解包逻辑都在内核态进行，&lt;code&gt;VXLAN&lt;/code&gt; 的性能更好，成为了容器网络的主流方案。&lt;/p&gt;
&lt;p&gt;关于路由模式，会在&lt;a class=&#34;link&#34; href=&#34;https://mazhen.tech/docker-route-networks&#34; &gt;下一篇文章&lt;/a&gt;介绍。&lt;/p&gt;
&lt;h2 id=&#34;vxlan&#34;&gt;VXLAN&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;VXLAN&lt;/code&gt;（Virtual Extensible LAN）是一种网络虚拟化技术，它将链路层的以太网包封装到UDP包中进行传输。&lt;code&gt;VXLAN&lt;/code&gt;最初是由VMware、Cisco开发，主要解决云环境下多租户的二层网络隔离。我们常听到公有云厂商宣称支持&lt;code&gt;VPC&lt;/code&gt;（virtual private cloud），实际底层就是使用&lt;code&gt;VXLAN&lt;/code&gt;实现的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;VXLAN&lt;/code&gt; packet的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112155616.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;vxlan&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到，最内部是原始的二层网络包，外面加上一个&lt;code&gt;VXLAN header&lt;/code&gt;，其中最重要的是&lt;code&gt;VNI&lt;/code&gt;（VXLAN network identifier)字段，它用来唯一标识一个&lt;code&gt;VXLAN&lt;/code&gt;。也就是说，使用不同的&lt;code&gt;VNI&lt;/code&gt;来区分不同的虚拟二层网络。&lt;code&gt;VNI&lt;/code&gt;有24位，基本够公用云厂商使用了。要知道原先用来网络隔离的虚拟局域网VLAN只支持4096个虚拟网络。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;VXLAN header&lt;/code&gt;外面封装了正常的UDP包。&lt;code&gt;VXLAN&lt;/code&gt;在UDP之上，实现了一个虚拟的二层网络，连接在这个虚拟二层网络上的主机，就像连接在普通的局域网上一样，可以互相通信。&lt;/p&gt;
&lt;p&gt;介绍完背景知识，我们可以开始动手实验了。&lt;/p&gt;
&lt;h2 id=&#34;实现方案一&#34;&gt;实现方案一&lt;/h2&gt;
&lt;p&gt;参照&lt;a class=&#34;link&#34; href=&#34;https://github.com/coreos/flannel&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flannel&lt;/a&gt;的实现方案：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112156887.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;flannel&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;配置内核参数，允许IP forwarding&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分别在&lt;code&gt;Node-1&lt;/code&gt;、&lt;code&gt;Node-2&lt;/code&gt;上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo sysctl net.ipv4.conf.all.forwarding=1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建“容器”&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;code&gt;Node-1&lt;/code&gt;上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns add docker1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在&lt;code&gt;Node-2&lt;/code&gt;上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns add docker2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;为什么创建个&lt;code&gt;Namesapce&lt;/code&gt;就说是“容器”？请参考&lt;a class=&#34;link&#34; href=&#34;https://mazhen.tech/docker-network-bridge&#34; &gt;上一篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建Veth pairs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分别在&lt;code&gt;Node-1&lt;/code&gt;、&lt;code&gt;Node-2&lt;/code&gt;上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link add veth0 type veth peer name veth1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;将Veth的一端放入“容器”&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;code&gt;Node-1&lt;/code&gt;上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set veth0 netns docker1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在&lt;code&gt;Node-2&lt;/code&gt;上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set veth0 netns docker2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建bridge&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分别在&lt;code&gt;Node-1&lt;/code&gt;、&lt;code&gt;Node-2&lt;/code&gt;上创建bridge &lt;code&gt;br0&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo brctl addbr br0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;将Veth的另一端接入bridge&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分别在&lt;code&gt;Node-1&lt;/code&gt;、&lt;code&gt;Node-2&lt;/code&gt;上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo brctl addif br0 veth1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;为&amp;quot;容器“内的网卡分配IP地址，并激活上线&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;code&gt;Node-1&lt;/code&gt;上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker1 ip addr add 172.18.10.2/24 dev veth0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker1 ip link set veth0 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在&lt;code&gt;Node-2&lt;/code&gt;上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker2 ip addr add 172.18.20.2/24 dev veth0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker2 ip link set veth0 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Veth另一端的网卡激活上线&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分别在&lt;code&gt;Node-1&lt;/code&gt;、&lt;code&gt;Node-2&lt;/code&gt;上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set veth1 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;为bridge分配IP地址，激活上线&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;code&gt;Node-1&lt;/code&gt;上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip addr add 172.18.10.1/24 dev br0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set br0 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在&lt;code&gt;Node-2&lt;/code&gt;上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip addr add 172.18.20.1/24 dev br0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set br0 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;将bridge设置为“容器”的缺省网关&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;code&gt;Node-1&lt;/code&gt;上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker1 route add default gw 172.18.10.1 veth0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在&lt;code&gt;Node-2&lt;/code&gt;上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker2 route add default gw 172.18.20.1 veth0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建VXLAN虚拟网卡&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;VXLAN&lt;/code&gt;需要在宿主机上创建一个虚拟网络设备对 &lt;code&gt;VXLAN&lt;/code&gt; 的包进行封装和解封装，实现这个功能的设备称为 &lt;code&gt;VTEP&lt;/code&gt;（VXLAN Tunnel Endpoint）。宿主机之间通过&lt;code&gt;VTEP&lt;/code&gt;建立“隧道”，在其中传输虚拟二层网络包。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Node-1&lt;/code&gt;创建&lt;code&gt;vxlan100&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link add vxlan100 type vxlan \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    id 100 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    local 192.168.31.183 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    dev enp0s3 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    dstport 4789 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    nolearning
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;为&lt;code&gt;vxlan100&lt;/code&gt;分配IP地址，然后激活：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip addr add 172.18.10.0/32 dev vxlan100
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set vxlan100 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;为了让&lt;code&gt;Node-1&lt;/code&gt;上访问&lt;code&gt;172.18.20.0/24&lt;/code&gt;网段的数据包能进入“隧道”，我们需要增加如下的路由规则：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip route add 172.18.20.0/24 dev vxlan100
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在&lt;code&gt;Node-2&lt;/code&gt;上执行相应的命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link add vxlan100 type vxlan \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    id 100 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    local 192.168.31.192 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    dev enp0s3 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    dstport 4789 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    nolearning
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip addr add 172.18.20.0/32 dev vxlan100
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set vxlan100 up
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip route add 172.18.10.0/24 dev vxlan100 scope global
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;手动更新ARP和FDB&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虚拟设备&lt;code&gt;vxlan100&lt;/code&gt;会用&lt;code&gt;ARP&lt;/code&gt;和&lt;code&gt;FDB&lt;/code&gt; (forwarding database) 数据库中记录的信息，填充网络协议包，建立节点间转发虚拟网络数据包的“隧道”。&lt;/p&gt;
&lt;p&gt;我们知道，在二层网络上传输IP包，需要先根据目的IP地址查询到目的MAC地址，这就是&lt;code&gt;ARP&lt;/code&gt;（Address Resolution Protocol）协议的作用。我们应该可以通过ARP查询到其他节点上容器IP地址对应的MAC地址，然后填充在&lt;code&gt;VXLAN&lt;/code&gt;内层的网络包中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FDB&lt;/code&gt;是记录网桥设备转发数据包的规则。虚拟网络数据包根据上面定义的路由规则，从&lt;code&gt;br0&lt;/code&gt;进入了本机的&lt;code&gt;vxlan100&lt;/code&gt;“隧道”入口，应该可以在&lt;code&gt;FDB&lt;/code&gt;中查询到“隧道”出口的MAC地址应该如何到达，这样，两个&lt;code&gt;VTEP&lt;/code&gt;就能完成”隧道“的建立。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vxlan&lt;/code&gt;为了建立节点间的“隧道”，需要一种机制，能让一个节点的加入、退出信息通知到其他节点，可以采用&lt;code&gt;multicast&lt;/code&gt;的方式进行节点的自动发现，也有很多&lt;code&gt;Unicast&lt;/code&gt;的方案，这篇文章&lt;a class=&#34;link&#34; href=&#34;https://vincent.bernat.ch/en/blog/2017-vxlan-linux&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&amp;lt;VXLAN &amp;amp; Linux&amp;gt;&lt;/a&gt;有很详细的介绍。总之就是要找到一种方式，能够更新每个节点的&lt;code&gt;ARP&lt;/code&gt;和&lt;code&gt;FDB&lt;/code&gt;数据库。&lt;/p&gt;
&lt;p&gt;如果是使用&lt;a class=&#34;link&#34; href=&#34;https://github.com/coreos/flannel&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flannel&lt;/a&gt;，它在节点启动的时候会采用某种机制自动更新其他节点的ARP和FDB数据库。现在我们的实验只能在两个节点上手动更新&lt;code&gt;ARP&lt;/code&gt;和&lt;code&gt;FDB&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;首先在两个节点上查询到设备&lt;code&gt;vxlan100&lt;/code&gt;的MAC地址，例如在我当前的环境：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Node-1&lt;/code&gt;上&lt;code&gt;vxlan100&lt;/code&gt;的MAC地址是&lt;code&gt;3a:8d:b8:69:10:3e&lt;/code&gt;
&lt;code&gt;Node-2&lt;/code&gt;上&lt;code&gt;vxlan100&lt;/code&gt;的MAC地址是&lt;code&gt;0e:e6:e6:5d:c2:da&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;Node-1&lt;/code&gt;上增加ARP和FDB的记录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip neighbor add 172.18.20.2 lladdr 0e:e6:e6:5d:c2:da dev vxlan100
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo bridge fdb append 0e:e6:e6:5d:c2:da dev vxlan100 dst 192.168.31.192
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们可以确认下执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112157782.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;node-1&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ARP&lt;/code&gt;中已经记录了&lt;code&gt;Node-2&lt;/code&gt;上容器IP对应的MAC地址。再看看&lt;code&gt;FDB&lt;/code&gt;的情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112158834.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;node-2&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;根据最后一条新增规则，我们可以知道如何到达&lt;code&gt;Node-2&lt;/code&gt;上“隧道”的出口&lt;code&gt;vxlan100&lt;/code&gt;。“隧道”两端是使用UDP进行传输，即容器间通讯的二层网络包是靠UDP在宿主机之间通信。&lt;/p&gt;
&lt;p&gt;类似的，在&lt;code&gt;Node-2&lt;/code&gt;上执行下面的命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip neighbor add 172.18.10.2 lladdr 3a:8d:b8:69:10:3e dev vxlan100
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo bridge fdb append 3a:8d:b8:69:10:3e dev vxlan100 dst 192.168.31.183
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试容器的跨节点通信&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在，容器&lt;code&gt;docker1&lt;/code&gt;和&lt;code&gt;docker1&lt;/code&gt;之间就可以相互访问了。&lt;/p&gt;
&lt;p&gt;我们从&lt;code&gt;docker1&lt;/code&gt;访问&lt;code&gt;docker2&lt;/code&gt;，在&lt;code&gt;Node-1&lt;/code&gt;上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker1 ping -c 3 172.18.20.2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;同样可以从&lt;code&gt;docker2&lt;/code&gt;访问&lt;code&gt;docker1&lt;/code&gt;，在&lt;code&gt;Node-2&lt;/code&gt;上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker2 ping -c 3 172.18.10.2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在测试过程中如果需要troubleshooting，可以使用&lt;code&gt;tcpdump&lt;/code&gt;在&lt;code&gt;veth1&lt;/code&gt;、&lt;code&gt;br0&lt;/code&gt;、&lt;code&gt;vxlan100&lt;/code&gt;等虚拟设备上抓包，确认网络包是按照预定路线在转发：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo tcpdump -i vxlan100 -n
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试环境恢复&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在两个节点上删除我们创建的虚拟设备：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set br0 down
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo brctl delbr br0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link  del veth1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link del vxlan100
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;实现方案二&#34;&gt;实现方案二&lt;/h2&gt;
&lt;p&gt;Docker原生的&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/network/overlay/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;overlay driver&lt;/a&gt;底层也是使用&lt;code&gt;VXLAN&lt;/code&gt;技术，但实现方案和&lt;a class=&#34;link&#34; href=&#34;https://github.com/coreos/flannel&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flannel&lt;/a&gt;略有不同：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112159004.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;overlay driver&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到，&lt;code&gt;vxlan100&lt;/code&gt;被“插”在了虚拟交换机&lt;code&gt;br0&lt;/code&gt;上，虚拟网络数据包从&lt;code&gt;br0&lt;/code&gt;到&lt;code&gt;vxlan100&lt;/code&gt;不是通过本机路由，而是&lt;code&gt;vxlan100&lt;/code&gt;根据&lt;code&gt;FDB&lt;/code&gt;直接进行了转发。&lt;/p&gt;
&lt;p&gt;执行的命令略有差异，我不再赘述过程，直接提供了命令，大家自己实验吧：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 在Node-1上执行
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo sysctl net.ipv4.conf.all.forwarding=1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns add docker1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link add veth0 type veth peer name veth1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set veth0 netns docker1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo brctl addbr br0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo brctl addif br0 veth1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker1 ip addr add 172.18.10.2/24 dev veth0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker1 ip link set veth0 up
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set veth1 up
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set br0 up
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker1 route add default veth0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link add vxlan100 type vxlan \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    id 100 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    local 192.168.31.183 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    dev enp0s5 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    dstport 4789 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    nolearning \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    proxy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set vxlan100 up
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo brctl addif br0 vxlan100
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip neigh add 172.18.20.2 lladdr [docker2的MAC地址] dev vxlan100
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo bridge fdb append [docker2的MAC地址]  dev vxlan100 dst 192.168.31.192
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 在Node-2上执行
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo sysctl net.ipv4.conf.all.forwarding=1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns add docker2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link add veth0 type veth peer name veth1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set veth0 netns docker2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo brctl addbr br0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo brctl addif br0 veth1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker2 ip addr add 172.18.20.2/24 dev veth0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker2 ip link set veth0 up
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set veth1 up
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set br0 up
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker2 route add default veth0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link add vxlan100 type vxlan \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    id 100 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    local 192.168.31.192 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    dev enp0s5 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    dstport 4789 \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    nolearning \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    proxy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set vxlan100 up
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo brctl addif br0 vxlan100
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip neigh add 172.18.10.2 lladdr [docker1的MAC地址] dev vxlan100
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo bridge fdb append [docker1的MAC地址]  dev vxlan100 dst 192.168.31.183
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;相信通过亲自动手实验，容器网络对你来说不再神秘。希望本文对你理解容器网络有所帮助。&lt;/p&gt;
&lt;p&gt;下一篇我将动手实验容器跨主机通信的&lt;a class=&#34;link&#34; href=&#34;https://mazhen.tech/docker-route-networks&#34; &gt;路由模式&lt;/a&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Docker单机网络模型动手实验</title>
        <link>https://mazhen.tech/p/docker%E5%8D%95%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%8A%A8%E6%89%8B%E5%AE%9E%E9%AA%8C/</link>
        <pubDate>Fri, 26 Oct 2018 21:40:03 +0800</pubDate>
        
        <guid>https://mazhen.tech/p/docker%E5%8D%95%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%8A%A8%E6%89%8B%E5%AE%9E%E9%AA%8C/</guid>
        <description>&lt;h2 id=&#34;容器的本质&#34;&gt;容器的本质&lt;/h2&gt;
&lt;p&gt;容器的本质就是一个进程，只不过对它进行了&lt;code&gt;Linux Namesapce&lt;/code&gt;隔离，让它看不到外面的世界，用&lt;code&gt;Cgroups&lt;/code&gt;限制了它能使用的资源，同时利用系统调用&lt;code&gt;pivot_root&lt;/code&gt;或&lt;code&gt;chroot&lt;/code&gt;切换了进程的根目录，把容器镜像挂载为根文件系统&lt;code&gt;rootfs&lt;/code&gt;。&lt;code&gt;rootfs&lt;/code&gt;中不仅有要运行的应用程序，还包含了应用的所有依赖库，以及操作系统的目录和文件。&lt;code&gt;rootfs&lt;/code&gt;打包了应用运行的完整环境，这样就保证了在开发、测试、线上等多个场景的一致性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112142723.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;docker&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;从上图可以看出，容器和虚拟机的最大区别就是，每个虚拟机都有独立的操作系统内核&lt;code&gt;Guest OS&lt;/code&gt;，而容器只是一种特殊的进程，它们共享同一个操作系统内核。&lt;/p&gt;
&lt;p&gt;看清了容器的本质，很多问题就容易理解。例如我们执行 &lt;code&gt;docker exec&lt;/code&gt; 命令能够进入运行中的容器，好像登录进独立的虚拟机一样。实际上这只不过是利用系统调用&lt;code&gt;setns&lt;/code&gt;，让当前进程进入到容器进程的&lt;code&gt;Namesapce&lt;/code&gt;中，它就能“看到”容器内部的情况了。&lt;/p&gt;
&lt;p&gt;关于容器涉及的基础技术，&lt;a class=&#34;link&#34; href=&#34;https://weibo.com/haoel&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;左耳朵耗子&lt;/a&gt;多年前写的系列文章仍然很有参考价值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://coolshell.cn/articles/17010.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DOCKER基础技术：LINUX NAMESPACE（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://coolshell.cn/articles/17029.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DOCKER基础技术：LINUX NAMESPACE（下）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://coolshell.cn/articles/17049.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DOCKER基础技术：LINUX CGROUP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://coolshell.cn/articles/17061.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DOCKER基础技术：AUFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://coolshell.cn/articles/17200.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DOCKER基础技术：DEVICEMAPPER&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;容器网络&#34;&gt;容器网络&lt;/h2&gt;
&lt;p&gt;如何让容器之间互相连接保持网络通畅，Docker有多种网络模型。对于单机上运行的多个容器，可以使用缺省的&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/network/bridge/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;bridge网络驱动&lt;/a&gt;。而容器的跨主机通信，一种常用的方式是利用&lt;code&gt;Overlay 网络&lt;/code&gt;，基于物理网络的虚拟化网络来实现。&lt;/p&gt;
&lt;p&gt;本文会在单机上实验展示&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/network/bridge/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;bridge网络模型&lt;/a&gt;，揭示其背后的实现原理。&lt;a class=&#34;link&#34; href=&#34;https://mazhen.tech/docker-overlay-networks&#34; &gt;下一篇文章&lt;/a&gt;会演示容器如何利用&lt;code&gt;Overlay 网络&lt;/code&gt;进行跨主机通信。&lt;/p&gt;
&lt;p&gt;我们按照下图创建网络拓扑，让容器之间网络互通，从容器内部可以访问外部资源，同时，容器内可以暴露服务让外部访问。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112143366.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;local&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在开始动手实验之前，先简单介绍一下&lt;code&gt;bridge网络模型&lt;/code&gt;会用到的Linux虚拟化网络技术。&lt;/p&gt;
&lt;h3 id=&#34;veth-pairs&#34;&gt;Veth Pairs&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Veth&lt;/code&gt;是成对出现的两张虚拟网卡，从一端发送的数据包，总会在另一端接收到。利用&lt;code&gt;Veth&lt;/code&gt;的特性，我们可以将一端的虚拟网卡&amp;quot;放入&amp;quot;容器内，另一端接入虚拟交换机。这样，接入同一个虚拟交换机的容器之间就实现了网络互通。&lt;/p&gt;
&lt;h3 id=&#34;linux-bridge&#34;&gt;Linux Bridge&lt;/h3&gt;
&lt;p&gt;交换机是工作在数据链路层的网络设备，它转发的是二层网络包。最简单的转发策略是将到达交换机输入端口的报文，广播到所有的输出端口。当然更好的策略是在转发过程中进行学习，记录交换机端口和MAC地址的映射关系，这样在下次转发时就能够根据报文中的MAC地址，发送到对应的输出端口。&lt;/p&gt;
&lt;p&gt;我们可以认为&lt;code&gt;Linux bridge&lt;/code&gt;就是虚拟交换机，连接在同一个&lt;code&gt;bridge&lt;/code&gt;上的容器组成局域网，不同的&lt;code&gt;bridge&lt;/code&gt;之间网络是隔离的。 &lt;code&gt;docker network create [NETWORK NAME]&lt;/code&gt;实际上就是创建出虚拟交换机。&lt;/p&gt;
&lt;h3 id=&#34;iptables&#34;&gt;iptables&lt;/h3&gt;
&lt;p&gt;容器需要能够访问外部世界，同时也可以暴露服务让外界访问，这时就要用到&lt;code&gt;iptables&lt;/code&gt;。另外，不同&lt;code&gt;bridge&lt;/code&gt;之间的隔离也会用到&lt;code&gt;iptables&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们说的&lt;code&gt;iptables&lt;/code&gt;包含了用户态的配置工具(&lt;code&gt;/sbin/iptables&lt;/code&gt;)和内核&lt;code&gt;netfilter&lt;/code&gt;模块，通过使用&lt;code&gt;iptables&lt;/code&gt;命令对内核的&lt;code&gt;netfilter&lt;/code&gt;模块做规则配置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;netfilter&lt;/code&gt;允许在网络数据包处理流程的各个阶段插入hook函数，可以根据预先定义的规则对数据包进行修改、过滤或传送。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112144668.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;iptables&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;从上图可以看出，网络包的处理流程有五个关键节点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PREROUTING&lt;/code&gt;：数据包进入路由表之前&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INPUT&lt;/code&gt;：通过路由表后目的地为本机&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FORWARDING&lt;/code&gt;：通过路由表后，目的地不为本机&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTPUT&lt;/code&gt;：由本机产生，向外转发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POSTROUTIONG&lt;/code&gt;：发送到网卡接口之前&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;iptables&lt;/code&gt; 提供了四种内置的表 &lt;code&gt;raw → mangle → nat → filter&lt;/code&gt;，优先级从高到低：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;raw&lt;/code&gt; 用于配置数据包，&lt;code&gt;raw&lt;/code&gt;中的数据包不会被系统跟踪。不常用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mangle&lt;/code&gt; 用于对特定数据包的修改。不常用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nat&lt;/code&gt;: 用于网络地址转换（NAT）功能（端口映射，地址映射等）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;：一般的过滤功能，默认表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个表可以设置在多个指定的节点，例如&lt;code&gt;filter&lt;/code&gt;表可以设置在&lt;code&gt;INPUT&lt;/code&gt;、&lt;code&gt;FORWARDING&lt;/code&gt;、&lt;code&gt;OUTPUT&lt;/code&gt;等节点。同一个节点中的多个表串联成&lt;code&gt;链&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iptables&lt;/code&gt; 是按照&lt;code&gt;表&lt;/code&gt;的维度来管理规则，&lt;code&gt;表&lt;/code&gt;中包含多个&lt;code&gt;链&lt;/code&gt;，&lt;code&gt;链&lt;/code&gt;中包含&lt;code&gt;规则&lt;/code&gt;列表。例如我们使用&lt;code&gt;sudo iptables -t filter -L&lt;/code&gt; 查看&lt;code&gt;filter&lt;/code&gt;表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112144620.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;iptables&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到，&lt;code&gt;filter&lt;/code&gt;表中包含三个&lt;code&gt;链&lt;/code&gt;，每个&lt;code&gt;链&lt;/code&gt;中定义了多条规则。由于&lt;code&gt;filter&lt;/code&gt;是缺省表，上面的命令可以简化为：&lt;code&gt;sudo iptables -L&lt;/code&gt;，即不通过&lt;code&gt;-t&lt;/code&gt;指定表时，操作的就是&lt;code&gt;filter&lt;/code&gt;表。&lt;/p&gt;
&lt;p&gt;在容器化网络场景，我们经常用到的是在&lt;code&gt;nat&lt;/code&gt;表中设置&lt;code&gt;SNAT&lt;/code&gt;和&lt;code&gt;DNAT&lt;/code&gt;。源地址转换是发生在数据包离开机器被发送之前，因此&lt;code&gt;SNAT&lt;/code&gt;只能设置在&lt;code&gt;POSTROUTIONG&lt;/code&gt;阶段。&lt;code&gt;DNAT&lt;/code&gt;是对目标地址的转换，需要在路由选择前完成，因此可以设置在&lt;code&gt;PREROUTING&lt;/code&gt;和&lt;code&gt;OUTPUT&lt;/code&gt;阶段。&lt;/p&gt;
&lt;h2 id=&#34;动手实验&#34;&gt;动手实验&lt;/h2&gt;
&lt;p&gt;有了前面的背景知识，我们就可以开始动手实验了。因为涉及到很多系统级设置，建议在一个“干净”的虚拟机内折腾，以免干扰到工作环境。我使用的实验环境是&lt;code&gt;Ubuntu 18.04.1 LTS&lt;/code&gt;，不需要安装&lt;code&gt;docker&lt;/code&gt;，我们使用系统命令模拟出容器网络环境。&lt;/p&gt;
&lt;h3 id=&#34;场景一容器间的网络互通&#34;&gt;场景一：容器间的网络互通&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建“容器”&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从前面的背景知识了解到，容器的本质是 &lt;code&gt;Namespace + Cgroups + rootfs&lt;/code&gt;。因此本实验我们可以仅仅创建出&lt;code&gt;Namespace&lt;/code&gt;网络隔离环境来模拟容器行为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns add docker0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns add docker1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;查看创建出的网络&lt;code&gt;Namesapce&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ls -l /var/run/netns
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-r--r--r-- 1 root root 0 Nov 11 03:52 docker0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-r--r--r-- 1 root root 0 Nov 11 03:52 docker1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建Veth pairs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link add veth0 type veth peer name veth1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link add veth2 type veth peer name veth3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;查看创建出的&lt;code&gt;Veth pairs&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ip addr show
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3: veth1@veth0: &amp;lt;BROADCAST,MULTICAST,M-DOWN&amp;gt; mtu 1500 qdisc noop state DOWN group default qlen 1000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    link/ether 3e:fe:2b:90:3e:b7 brd ff:ff:ff:ff:ff:ff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4: veth0@veth1: &amp;lt;BROADCAST,MULTICAST,M-DOWN&amp;gt; mtu 1500 qdisc noop state DOWN group default qlen 1000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    link/ether 6a:a3:02:07:f4:92 brd ff:ff:ff:ff:ff:ff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;5: veth3@veth2: &amp;lt;BROADCAST,MULTICAST,M-DOWN&amp;gt; mtu 1500 qdisc noop state DOWN group default qlen 1000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    link/ether 76:14:e5:0e:26:98 brd ff:ff:ff:ff:ff:ff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;6: veth2@veth3: &amp;lt;BROADCAST,MULTICAST,M-DOWN&amp;gt; mtu 1500 qdisc noop state DOWN group default qlen 1000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    link/ether 6a:0a:84:0f:a7:f7 brd ff:ff:ff:ff:ff:ff
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;将Veth的一端放入“容器”&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设置&lt;code&gt;Veth&lt;/code&gt;一端的虚拟网卡的&lt;code&gt;Namespace&lt;/code&gt;，相当于将这张网卡放入“容器”内：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set veth0 netns docker0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set veth2 netns docker1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;查看“容器” docker0 内的网卡：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo ip netns exec docker0 ip addr show
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1: lo: &amp;lt;LOOPBACK&amp;gt; mtu 65536 qdisc noop state DOWN group default qlen 1000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4: veth0@if3: &amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 qdisc noop state DOWN group default qlen 1000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    link/ether 6a:a3:02:07:f4:92 brd ff:ff:ff:ff:ff:ff link-netnsid 0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;ip netns exec docker0 ...&lt;/code&gt;的意思是在网络&lt;code&gt;Namesapce&lt;/code&gt; &lt;code&gt;docker0&lt;/code&gt;的限制下执行后面跟着的命令，相当于在“容器”内执行命令。&lt;/p&gt;
&lt;p&gt;可以看到，&lt;code&gt;veth0&lt;/code&gt;已经放入了“容器”docker0内。同样使用命令&lt;code&gt;sudo ip netns exec docker1 ip addr show&lt;/code&gt;查看“容器”docker1内的网卡。&lt;/p&gt;
&lt;p&gt;同时，在宿主机上查看网卡&lt;code&gt;ip addr&lt;/code&gt;，发现&lt;code&gt;veth0&lt;/code&gt;和&lt;code&gt;veth2&lt;/code&gt;已经消失，确实是放入“容器”内了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建bridge&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装&lt;code&gt;bridge&lt;/code&gt;管理工具&lt;code&gt;brctl&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install bridge-utils
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;创建bridge &lt;code&gt;br0&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo brctl addbr br0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;将Veth的另一端接入bridge&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo brctl addif br0 veth1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo brctl addif br0 veth3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;查看接入效果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo brctl show
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112145791.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;brctl&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;两个网卡&lt;code&gt;veth1&lt;/code&gt;和&lt;code&gt;veth3&lt;/code&gt;已经“插”在&lt;code&gt;bridge&lt;/code&gt;上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;为&amp;quot;容器“内的网卡分配IP地址，并激活上线&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;docker0容器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker0 ip addr add 172.18.0.2/24 dev veth0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker0 ip link set veth0 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;docker1容器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker1 ip addr add 172.18.0.3/24 dev veth2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker1 ip link set veth2 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Veth另一端的网卡激活上线&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set veth1 up
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set veth3 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;为bridge分配IP地址，激活上线&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip addr add 172.18.0.1/24 dev br0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set br0 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;“容器”间的互通测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以先设置监听&lt;code&gt;br0&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo tcpdump -i br0 -n
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;从容器&lt;code&gt;docker0&lt;/code&gt; &lt;code&gt;ping&lt;/code&gt; 容器&lt;code&gt;docker1&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker0 ping -c 3 172.18.0.3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;br0&lt;/code&gt;上监控到的网络流量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;05:53:10.859956 ARP, Request who-has 172.18.0.3 tell 172.18.0.2, length 28
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;05:53:10.859973 ARP, Reply 172.18.0.3 is-at 06:f4:01:c2:dd:6e, length 28
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;05:53:10.860030 IP 172.18.0.2 &amp;gt; 172.18.0.3: ICMP echo request, id 1310, seq 1, length 64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;05:53:10.860050 IP 172.18.0.3 &amp;gt; 172.18.0.2: ICMP echo reply, id 1310, seq 1, length 64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;05:53:11.878348 IP 172.18.0.2 &amp;gt; 172.18.0.3: ICMP echo request, id 1310, seq 2, length 64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;05:53:11.878365 IP 172.18.0.3 &amp;gt; 172.18.0.2: ICMP echo reply, id 1310, seq 2, length 64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;05:53:12.901334 IP 172.18.0.2 &amp;gt; 172.18.0.3: ICMP echo request, id 1310, seq 3, length 64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;05:53:12.901350 IP 172.18.0.3 &amp;gt; 172.18.0.2: ICMP echo reply, id 1310, seq 3, length 64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;05:53:16.006471 ARP, Request who-has 172.18.0.2 tell 172.18.0.3, length 28
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;05:53:16.006498 ARP, Reply 172.18.0.2 is-at c2:23:fe:ac:f5:4e, length 28
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以看到，先是&lt;code&gt;172.18.0.2&lt;/code&gt;发起的ARP请求，询问&lt;code&gt;172.18.0.3&lt;/code&gt;的&lt;code&gt;MAC&lt;/code&gt;地址，然后是&lt;code&gt;ICMP&lt;/code&gt;的请求和响应，最后是&lt;code&gt;172.18.0.3&lt;/code&gt;的ARP请求。因为接在同一个bridge &lt;code&gt;br0&lt;/code&gt;上，所以是二层互通的局域网。&lt;/p&gt;
&lt;p&gt;同样，从容器&lt;code&gt;docker1&lt;/code&gt; &lt;code&gt;ping&lt;/code&gt; 容器&lt;code&gt;docker0&lt;/code&gt;也是通的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker1 ping -c 3 172.18.0.2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;场景二从宿主机访问容器内网络&#34;&gt;场景二：从宿主机访问“容器”内网络&lt;/h3&gt;
&lt;p&gt;在“容器”&lt;code&gt;docker0&lt;/code&gt;内启动服务，监听80端口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker0 nc -lp 80
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在宿主机上执行telnet，可以连接到&lt;code&gt;docker0&lt;/code&gt;的80端口：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;telnet 172.18.0.2 80
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;场景三从容器内访问外网&#34;&gt;场景三：从“容器”内访问外网&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;配置内核参数，允许IP forwarding&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo sysctl net.ipv4.conf.all.forwarding=1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;配置iptables FORWARD规则&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先确认&lt;code&gt;iptables FORWARD&lt;/code&gt;的缺省策略：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo iptables -L
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207112146892.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;iptables&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;如果缺省策略是&lt;code&gt;DROP&lt;/code&gt;，需要设置为&lt;code&gt;ACCEPT&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo iptables -P FORWARD ACCEPT
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;缺省策略的含义是，在数据包没有匹配到规则时执行的缺省动作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;将bridge设置为“容器”的缺省网关&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker0 route add default gw 172.18.0.1 veth0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker1 route add default gw 172.18.0.1 veth2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;查看“容器”内的路由表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$sudo ip netns exec docker0  route -n
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Kernel IP routing table
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0.0.0.0         172.18.0.1      0.0.0.0         UG    0      0        0 veth0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;172.18.0.0      0.0.0.0         255.255.255.0   U     0      0        0 veth0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以看出，“容器”内的缺省&lt;code&gt;Gateway&lt;/code&gt;是&lt;code&gt;bridge&lt;/code&gt;的IP地址，非&lt;code&gt;172.18.0.0/24&lt;/code&gt;网段的数据包会路由给&lt;code&gt;bridge&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;配置iptables的SNAT规则&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器的IP地址外部并不认识，如果它要访问外网，需要在数据包离开前将源地址替换为宿主机的IP，这样外部主机才能用宿主机的IP作为目的地址发回响应。&lt;/p&gt;
&lt;p&gt;另外一个需要注意的问题，内核&lt;code&gt;netfilter&lt;/code&gt;会追踪记录连接，我们在增加了SNAT规则时，系统会自动增加一个隐式的反向规则，这样返回的包会自动将宿主机的IP替换为容器IP。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo iptables -t nat -A POSTROUTING -s 172.18.0.0/24 ! -o br0 -j MASQUERADE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面的命令的含义是：在&lt;code&gt;nat&lt;/code&gt;表的&lt;code&gt;POSTROUTING&lt;/code&gt;链增加规则，当数据包的源地址为&lt;code&gt;172.18.0.0/24&lt;/code&gt;网段，出口设备不是&lt;code&gt;br0&lt;/code&gt;时，就执行&lt;code&gt;MASQUERADE&lt;/code&gt;动作。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MASQUERADE&lt;/code&gt;也是一种源地址转换动作，它会动态选择宿主机的一个IP做源地址转换，而&lt;code&gt;SNAT&lt;/code&gt;动作必须在命令中指定固定的IP地址。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;从“容器”内访问外部地址&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker0 ping -c 3 123.125.115.110
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker1 ping -c 3 123.125.115.110
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们确认在“容器”内是可以访问外部网络的。&lt;/p&gt;
&lt;h3 id=&#34;场景四从外部访问容器内暴露的服务&#34;&gt;场景四：从外部访问“容器”内暴露的服务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;配置iptables的DNAT规则&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当外部通过宿主机的IP和端口访问容器内启动的服务时，在数据包进入&lt;code&gt;PREROUTING&lt;/code&gt;阶段就要进行目的地址转换，将宿主机IP转换为容器IP。同样，系统会为我们自动增加一个隐式的反向规则，数据包在离开宿主机时自动做反向转换。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo iptables -t nat -A PREROUTING  ! -i br0 -p tcp -m tcp --dport 80 -j DNAT --to-destination 172.18.0.2:80
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面命令的含义是：在&lt;code&gt;nat&lt;/code&gt;表的&lt;code&gt;PREROUTING&lt;/code&gt;链增加规则，当输入设备不是&lt;code&gt;br0&lt;/code&gt;，目的端口为80时，做目的地址转换，将宿主机IP替换为容器IP。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;从远程访问“容器”内暴露的服务&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在“容器”docker0内启动服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip netns exec docker0 nc -lp 80
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在和宿主机同一个局域网的远程主机访问宿主机IP:80&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;telnet 192.168.31.183 80
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;确认可以访问到容器内启动的服务。&lt;/p&gt;
&lt;h3 id=&#34;测试环境恢复&#34;&gt;测试环境恢复&lt;/h3&gt;
&lt;p&gt;删除虚拟网络设备&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link set br0 down
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo brctl delbr br0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link  del veth1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ip link  del veth3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;iptablers&lt;/code&gt;和&lt;code&gt;Namesapce&lt;/code&gt;的配置在机器重启后被清除。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文我们在介绍了&lt;code&gt;veth&lt;/code&gt;、&lt;code&gt;Linux bridge&lt;/code&gt;、&lt;code&gt;iptables&lt;/code&gt;等概念后，亲自动手模拟出了&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/network/bridge/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;docker bridge网络模型&lt;/a&gt;，并测试了几种场景的网络互通。实际上&lt;code&gt;docker network&lt;/code&gt; 就是使用了上述技术，帮我们创建和维护网络。通过动手实验，相信你对docker bridge网络理解的更加深入。&lt;/p&gt;
&lt;p&gt;下一篇我将动手实验容器如何&lt;a class=&#34;link&#34; href=&#34;https://mazhen.tech/docker-overlay-networks&#34; &gt;利用&lt;code&gt;Overlay 网络&lt;/code&gt;进行跨主机通信&lt;/a&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>为Wireshark编写HSF2协议解析插件</title>
        <link>https://mazhen.tech/p/%E4%B8%BAwireshark%E7%BC%96%E5%86%99hsf2%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90%E6%8F%92%E4%BB%B6/</link>
        <pubDate>Sun, 21 Dec 2014 14:15:17 +0800</pubDate>
        
        <guid>https://mazhen.tech/p/%E4%B8%BAwireshark%E7%BC%96%E5%86%99hsf2%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90%E6%8F%92%E4%BB%B6/</guid>
        <description>&lt;p&gt;&lt;code&gt;Wireshark&lt;/code&gt;是排查网络问题最常用的工具，它已经内置支持了上百种通用协议，同时它的扩展性也很好，对于自定义的应用层网络协议，你可以使用&lt;code&gt;c&lt;/code&gt;或者&lt;code&gt;lua&lt;/code&gt;编写协议解析插件，这样你就可以在&lt;code&gt;Wireshark&lt;/code&gt;中观察到协议的内容而不是二进制流，为排查问题带来一定的便利性。&lt;/p&gt;
&lt;p&gt;最近在排查一个&lt;code&gt;HSF&lt;/code&gt;超时的问题，顺便花了些时间为&lt;code&gt;Wireshark&lt;/code&gt;写了一个&lt;code&gt;HSF2&lt;/code&gt;协议解析插件，目前支持&lt;code&gt;HSF2&lt;/code&gt;的&lt;code&gt;request&lt;/code&gt;、&lt;code&gt;response&lt;/code&gt;和&lt;code&gt;heart beat&lt;/code&gt;协议，支持将多个&lt;code&gt;packet&lt;/code&gt;还原为上层&lt;code&gt;PDU&lt;/code&gt;。暂不支持HSF原先的TB Remoting协议。先看效果。&lt;/p&gt;
&lt;p&gt;首先在Packet List区域已经能识别HSF2协议：&lt;/p&gt;
&lt;p&gt;HSF的请求和响应&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011417781.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;HSF的心跳协议&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011417651.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;点击某个数据包，可以在Packet details区域查看详细的协议内容：
HSF请求&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011418183.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到很多协议的重要信息，包括序列化方式，超时时间，服务名称、方法及参数&lt;/p&gt;
&lt;p&gt;HSF响应&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011418163.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;HeartBeat请求&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011419145.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;心跳协议比较简单，响应就不看了。&lt;/p&gt;
&lt;p&gt;插件是使用lua开发的，安装比较简单，以OS X平台为例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将协议解析脚本copy到&lt;code&gt;/Applications/Wireshark.app/Contents/Resources/share/wireshark/&lt;/code&gt; 目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑&lt;code&gt;init.lua&lt;/code&gt;文件，设置&lt;code&gt;disable_lua = false&lt;/code&gt;，确保lua支持打开&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;init.lua&lt;/code&gt;文件末尾增加&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dofile(&amp;#34;hsf2.lua&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;再次启动&lt;code&gt;Wireshark&lt;/code&gt;，会对12200端口的数据流使用脚本解析，已经可以识别&lt;code&gt;HSF&lt;/code&gt;协议了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;附上&lt;code&gt;hsf2.lua&lt;/code&gt;，边翻&lt;code&gt;HSF&lt;/code&gt;代码边写的，写完眼已经花了，错误难免，欢迎试用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;  1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 87
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 88
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 89
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 90
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 91
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 92
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 93
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 94
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 95
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 96
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 97
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 98
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 99
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;100
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;101
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;102
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;103
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;104
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;105
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;106
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;107
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;108
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;109
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;110
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;111
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;112
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;113
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;114
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;115
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;116
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;117
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;118
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;119
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;120
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;121
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;122
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;123
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;124
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;125
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;126
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;127
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;128
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;129
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;130
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;131
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;132
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;133
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;134
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;135
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;136
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;137
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;138
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;139
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;140
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;141
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;142
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;143
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;144
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;145
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;146
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;147
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;148
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;149
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;150
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;151
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;152
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;153
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;154
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;155
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;156
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;157
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;158
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;159
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;160
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;161
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;162
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;163
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;164
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;165
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;166
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;167
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;168
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;169
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;170
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;171
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;172
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;173
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;174
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;175
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;176
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;177
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;178
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;179
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;180
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;181
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;182
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;183
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;184
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;185
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;186
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;187
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;188
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;189
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;190
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;191
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;192
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;193
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;194
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;195
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;196
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;197
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;198
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;199
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;200
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;201
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;202
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;203
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;204
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;205
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;206
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;207
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;208
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;209
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;210
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;211
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;212
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;213
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;214
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;215
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;216
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;217
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;218
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;219
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;220
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;221
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;222
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;223
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;224
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;225
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;226
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;227
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;228
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;229
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;230
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;231
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;232
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;233
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;234
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;235
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;236
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;237
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;238
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;239
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;240
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;241
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;242
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;243
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;244
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;245
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;246
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;247
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;248
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;249
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;250
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;251
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;252
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;253
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;254
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;255
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;256
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;257
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;258
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;259
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;260
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;261
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;262
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;263
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;264
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;265
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;266
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;267
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;268
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;269
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;270
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;271
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;272
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;273
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;274
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;275
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;276
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;277
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;278
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;279
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;280
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;281
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;282
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;283
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;284
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;285
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;286
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;287
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;288
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;289
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-- declare the protocol
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hsf2_proto = Proto(&amp;#34;hsf2&amp;#34;, &amp;#34;Taobao HSF2 Protocol&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-- declare the value strings
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local vs_id = {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [12] = &amp;#34;HSF2 Heart Beat&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [13] = &amp;#34;HSF2 TB Remoting&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [14] = &amp;#34;HSF2 HSF Remoting&amp;#34;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local vs_version = {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [1] = &amp;#34;HSF2&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local vs_op = {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [0] = &amp;#34;request&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [1] = &amp;#34;response&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local vs_codectype = {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [1] = &amp;#34;HESSIAN_CODEC&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [2] = &amp;#34;JAVA_CODEC&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [3] = &amp;#34;TOP_CODEC&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [4] = &amp;#34;HESSIAN2_CODEC&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [5] = &amp;#34;KRYO_CODEC&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [6] = &amp;#34;JSON_CODEC&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [7] = &amp;#34;CUSTOMIZED_CODEC&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local vs_responsestatus = {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [20] = &amp;#34;OK&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [30] = &amp;#34;client timeout&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [31] = &amp;#34;server timeout&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [40] = &amp;#34;bad request&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [50] = &amp;#34;bad response&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [60] = &amp;#34;service not found&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [70] = &amp;#34;service error&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [80] = &amp;#34;server error&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [90] = &amp;#34;client error&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [91] = &amp;#34;Unknow error&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [81] = &amp;#34;Thread pool is busy&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [82] = &amp;#34;Communication error&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [88] = &amp;#34;server will close soon&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [10] = &amp;#34;server send coders&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [83] = &amp;#34;Unkown code&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-- declare the fields
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_id = ProtoField.uint8(&amp;#34;hsf2.id&amp;#34;, &amp;#34;Identification&amp;#34;, base.Dec, vs_id)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_version = ProtoField.uint8(&amp;#34;hsf2.version&amp;#34;, &amp;#34;version&amp;#34;, base.Dec, vs_version)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_op = ProtoField.uint8(&amp;#34;hsf2.op&amp;#34;, &amp;#34;operation&amp;#34;, base.DEC, vs_op)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_codectype = ProtoField.uint8(&amp;#34;hsf2.codectype&amp;#34;, &amp;#34;codectype&amp;#34;, base.DEC, vs_codectype)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_reserved = ProtoField.uint8(&amp;#34;hsf2.reserved&amp;#34;, &amp;#34;reserved&amp;#34;, base.DEC)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_req_id = ProtoField.uint64(&amp;#34;hsf2.req_id&amp;#34;, &amp;#34;RequestID&amp;#34;, base.DEC)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_timeout = ProtoField.uint32(&amp;#34;hsf2.timeout&amp;#34;, &amp;#34;timeout&amp;#34;, base.DEC)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_service_name_len = ProtoField.uint32(&amp;#34;hsf2.service_name_len&amp;#34;, &amp;#34;Service Name length&amp;#34;, base.DEC)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_method_name_len = ProtoField.uint32(&amp;#34;hsf2.method_name_len&amp;#34;, &amp;#34;Method Name length&amp;#34;, base.DEC)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_arg_count = ProtoField.uint32(&amp;#34;hsf2.arg.count&amp;#34;, &amp;#34;Argument Count&amp;#34;, base.DEC)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_arg_type_len = ProtoField.uint32(&amp;#34;hsf2.arg.type.len&amp;#34;, &amp;#34;Argument Type length&amp;#34;, base.DEC)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_arg_obj_len = ProtoField.uint32(&amp;#34;hsf2.arg.obj.len&amp;#34;, &amp;#34;Argument Object length&amp;#34;, base.DEC)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_req_prop_len = ProtoField.uint32(&amp;#34;hsf2.req.prop.len&amp;#34;, &amp;#34;Request Prop Length&amp;#34;, base.DEC)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_service_name = ProtoField.string(&amp;#34;hsf2.service.name&amp;#34;, &amp;#34;Service Name&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_method_name = ProtoField.string(&amp;#34;hsf2.method.name&amp;#34;, &amp;#34;Method Name&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_arg_type = ProtoField.string(&amp;#34;hsf2.arg.type&amp;#34;, &amp;#34;Argument Type&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_arg_obj = ProtoField.bytes(&amp;#34;hsf2.arg.obj&amp;#34;, &amp;#34;Argument Object&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_req_prop = ProtoField.bytes(&amp;#34;hsf2.req.prop&amp;#34;, &amp;#34;Request Prop&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_response_status = ProtoField.uint32(&amp;#34;hsf2.response.status&amp;#34;, &amp;#34;Response Status&amp;#34;, base.DEC, vs_responsestatus)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_response_body_len = ProtoField.uint32(&amp;#34;hsf2.response.body.len&amp;#34;, &amp;#34;Response Body Length&amp;#34;, base.DEC)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;local f_response_body = ProtoField.bytes(&amp;#34;hsf2.response.body&amp;#34;, &amp;#34;Response Body&amp;#34;, base.DEC)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hsf2_proto.fields = { f_id, f_version, f_op, f_codectype, f_reserved, f_req_id, f_timeout, 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                      f_service_name_len, f_method_name_len, f_arg_count, f_arg_type_len, f_arg_obj_len, f_req_prop_len,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                      f_service_name, f_method_name, f_arg_type, f_arg_obj, f_req_prop, 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                      f_response_status, f_response_body_len, f_response_body
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;function get_pdu_length(buffer)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    local offset =  0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    local id = buffer(offset, 1):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -- heart beat
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if id  == 12 then
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        return 18 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -- TB REMOTING
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if id == 13 then
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      -- TODO
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        return 18
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -- HSF REMOTING
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if id == 14 then
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        local version = buffer(offset, 1):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        local op = buffer(offset, 1):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        -- request
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        if op == 0 then
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          local service_name_len = buffer(19, 4):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          local method_name_len = buffer(23,4):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          local arg_count = buffer(27,4):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          offset = 27 + 4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          local arg_content_len = 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          for i = 1, arg_count do 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              arg_content_len = arg_content_len + buffer(offset,4):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              offset = offset + 4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          for i = 1, arg_count  do 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              arg_content_len = arg_content_len + buffer(offset,4):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              offset = offset + 4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          local req_prop_len = buffer(offset,4):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          local len = 30 + arg_count*4*2 + 5 + service_name_len + method_name_len + arg_content_len + req_prop_len
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          return len
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        -- response
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        if op == 1 then
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            local body_len = buffer(16, 4):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            return 20 + body_len
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-- create the dissection function
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;function hsf2_proto.dissector(buffer, pinfo, tree)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -- check the protocol
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -- TODO support TB Remoting
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    local check_proto = buffer(0, 1):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if check_proto &amp;lt; 12 or check_proto &amp;gt; 14 or check_proto == 13 then
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        return
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -- Set the protocol column
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    pinfo.cols[&amp;#39;protocol&amp;#39;] = &amp;#34;HSF2&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -- Reassembling packets into one PDU
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    local pdu_len = get_pdu_length(buffer)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if pdu_len &amp;gt; buffer:len() then
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        pinfo.desegment_len = pdu_len - buffer:len()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        pinfo.desegment_offset = 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        return
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -- create the HSF2 protocol tree item
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    local t_hsf2 = tree:add(hsf2_proto, buffer())
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    local offset = 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    local id = buffer(offset, 1):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    t_hsf2:add(f_id, id)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -- heart beat
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if id  == 12 then
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        local op = buffer(offset, 1):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        t_hsf2:add(f_op, op)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        -- Set the info column to the name of the function
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        local info = vs_id[id]..&amp;#34;:&amp;#34;..vs_op[op]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        pinfo.cols[&amp;#39;info&amp;#39;] = info
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        t_hsf2:add(f_version, buffer(offset, 1))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        t_hsf2:add(f_reserved, buffer(offset, 1))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        t_hsf2:add(f_reserved, buffer(offset, 1))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        t_hsf2:add(f_reserved, buffer(offset, 1))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        t_hsf2:add(f_req_id, buffer(offset, 8))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        offset = offset + 8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        t_hsf2:add(f_timeout, buffer(offset, 4))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -- TB REMOTING
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if id == 13 then
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      -- TODO        
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -- HSF REMOTING
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if id == 14 then        
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        t_hsf2:add(f_version, buffer(offset, 1))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        local op = buffer(offset, 1):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        t_hsf2:add(f_op, op)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        -- Set the info column to the name of the function
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        local info = vs_id[id]..&amp;#34;:&amp;#34;..vs_op[op]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        pinfo.cols[&amp;#39;info&amp;#39;] = info
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        -- request
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        if op == 0 then
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          t_hsf2:add(f_codectype, buffer(offset, 1))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          t_hsf2:add(f_reserved, buffer(offset, 1))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          t_hsf2:add(f_reserved, buffer(offset, 1))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          t_hsf2:add(f_reserved, buffer(offset, 1))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          t_hsf2:add(f_req_id, buffer(offset, 8))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          offset = offset + 8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          t_hsf2:add(f_timeout, buffer(offset, 4))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          offset = offset + 4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          local service_name_len = buffer(offset, 4):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          t_hsf2:add(f_service_name_len, service_name_len)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          offset = offset +  4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          local method_name_len = buffer(offset,4):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          t_hsf2:add(f_method_name_len, method_name_len)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          offset = offset +  4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          local arg_count = buffer(offset,4):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          t_hsf2:add(f_arg_count, arg_count)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          offset = offset +  4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          local arg_type_len_array = {}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          for i = 1, arg_count do
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              arg_type_len_array[i] = buffer(offset, 4):uint();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              offset = offset +  4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              t_hsf2:add(f_arg_type_len, arg_type_len_array[i])
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          local arg_obj_len_array = {}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          for i = 1, arg_count do
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              arg_obj_len_array[i] = buffer(offset, 4):uint();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              offset = offset +  4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              t_hsf2:add(f_arg_obj_len, arg_obj_len_array[i])
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          local prop_len = buffer(offset, 4):uint();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          offset = offset +  4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          t_hsf2:add(f_req_prop_len, prop_len)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          t_hsf2:add(f_service_name, buffer(offset, service_name_len))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          offset = offset +  service_name_len
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          t_hsf2:add(f_method_name, buffer(offset, method_name_len))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          offset = offset +  method_name_len
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          for i = 1, #arg_type_len_array do
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              t_hsf2:add(f_arg_type, buffer(offset, arg_type_len_array[i]))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              offset = offset +  arg_type_len_array[i]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          for i = 1, #arg_obj_len_array do
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              t_hsf2:add(f_arg_obj, buffer(offset, arg_obj_len_array[i]))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              offset = offset +  arg_obj_len_array[i]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          if prop_len &amp;gt; 0 then
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              t_hsf2:add(f_req_prop, buffer(offset, prop_len))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        -- response
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        if op == 1 then
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            t_hsf2:add(f_response_status, buffer(offset, 1))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            t_hsf2:add(f_codectype, buffer(offset, 1))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            t_hsf2:add(f_reserved, buffer(offset, 1))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            t_hsf2:add(f_reserved, buffer(offset, 1))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            t_hsf2:add(f_reserved, buffer(offset, 1))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            offset = offset + 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            t_hsf2:add(f_req_id, buffer(offset, 8))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            offset = offset +  8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            local body_len = buffer(offset, 4):uint()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            t_hsf2:add(f_response_body_len, body_len)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            offset = offset +  4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            t_hsf2:add(f_response_body, buffer(offset, body_len))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;end
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-- load the tcp port table
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tcp_table = DissectorTable.get(&amp;#34;tcp.port&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-- register the protocol to port 12200
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tcp_table:add(12200, hsf2_proto)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>从开发角度看DNS</title>
        <link>https://mazhen.tech/p/%E4%BB%8E%E5%BC%80%E5%8F%91%E8%A7%92%E5%BA%A6%E7%9C%8Bdns/</link>
        <pubDate>Wed, 10 Sep 2014 11:04:27 +0800</pubDate>
        
        <guid>https://mazhen.tech/p/%E4%BB%8E%E5%BC%80%E5%8F%91%E8%A7%92%E5%BA%A6%E7%9C%8Bdns/</guid>
        <description>&lt;p&gt;DNS（Domain Name System）简单说就是一个名称到IP地址的映射，使用容易记住的域名代替IP地址。基本原理就不讲了，网上的文章很多。&lt;/p&gt;
&lt;p&gt;了解了基本原理，你就可以使用&lt;code&gt;dig&lt;/code&gt;(Domain Information Groper）命令进行探索。当对淘宝的几个域名进行&lt;code&gt;dig&lt;/code&gt;时，你发现事情并不像想像的那么简单。&lt;/p&gt;
&lt;p&gt;为了使大家的输出一致，我在dig命令中显示的指定了DNS服务器（&lt;code&gt;@222.172.200.68&lt;/code&gt; 云南电信DNS）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dig @222.172.200.68 login.alibaba-inc.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011106325.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dig @222.172.200.68 guang.taobao.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011106370.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dig @222.172.200.68 item.taobao.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011107914.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;你会发现对于域名的查询，都不是直接返回IP地址这么简单，而是经过了神奇的&lt;code&gt;CNAME&lt;/code&gt;。一般文档在介绍&lt;code&gt;CNAME&lt;/code&gt;时只是说可以给一个域名指定别名（alias），其实这是&lt;code&gt;DNS&lt;/code&gt;运维非常重要的手段，使得DNS配置具有一定的灵活性和可扩展性。结合上面三个域名的解析说一下。先给一张高大上的图，是按照我自己的理解画的，不一定完全正确:)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011108895.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;图上分了三层，最上层是常规的DNS解析过程，用户通过local DNS做递归查询，最终定位到taobao.com权威DNS服务器。&lt;/p&gt;
&lt;p&gt;中间层可以称为&lt;code&gt;GSLB&lt;/code&gt;（Global Server Load Balancing），作用是提供域名的智能解析，根据一定的策略返回结果。淘系目前有三套&lt;code&gt;GSLB&lt;/code&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;F5 GTM&lt;/code&gt;：F5的硬件设备，基本已经被淘汰，全部替换为自研软件。GTM功能强大，但对用户而言是黑盒，性能一般价格昂贵。早期淘宝CDN智能调度就是基于F5 GTM做的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ADNS&lt;/code&gt;：阿里自研权威DNS，替换GTM。ADNS很牛逼，可惜资料太少。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pharos&lt;/code&gt;：阿里CDN的大脑，实现CDN流量精确，稳定，安全的调度。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;taobao.com权威DNS服务器会根据不用的域名，&lt;code&gt;CNAME&lt;/code&gt;到不同的&lt;code&gt;GSLB&lt;/code&gt;做智能调度。&lt;code&gt;CNAME&lt;/code&gt;的作用有点类似请求分发，taobao.com权威DNS服务器将域名解析请求转交给下一层域名服务器处理。&lt;/p&gt;
&lt;p&gt;最下层是应用层，提供真正的服务。&lt;/p&gt;
&lt;p&gt;现在再看看这三个域名的解析。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;login.alibaba-inc.com&lt;/code&gt; 被转交给了&lt;code&gt;GTM&lt;/code&gt;做智能解析，&lt;code&gt;GTM&lt;/code&gt;通过返回不同机房的VIP做流量调度，用户的请求最终经过&lt;code&gt;LVS&lt;/code&gt;到达我们的应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;guang.taobao.com&lt;/code&gt;的解析过程和&lt;code&gt;login.alibaba-inc.com&lt;/code&gt;类似，只不过智能调度换成了&lt;code&gt;ADNS&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;item.taobao.com&lt;/code&gt;有点小复杂。我们都知道&lt;code&gt;CDN&lt;/code&gt;是做静态资源加速的，像这样的静态资源域名&lt;code&gt;img04.taobaocdn.com&lt;/code&gt;会由&lt;code&gt;Pharos&lt;/code&gt;解析调度，为用户返回就近的&lt;code&gt;CDN&lt;/code&gt;节点。但什么时候动态内容也经过&lt;code&gt;CDN&lt;/code&gt;代理了？这就是高大上的&lt;code&gt;统一接入层&lt;/code&gt;。简单说下过程：&lt;code&gt;item.taobao.com&lt;/code&gt;通过&lt;code&gt;Pharos&lt;/code&gt;的智能调度，返回给用户就近的&lt;code&gt;CDN&lt;/code&gt;节点。当用户的请求到达&lt;code&gt;CDN&lt;/code&gt;节点时，这个节点会为动态内容的域名选择合适的后端服务，相当于每次都做回源处理。这个&lt;code&gt;CDN&lt;/code&gt;节点可以理解为用户请求的代理。CDN在选择后端服务时，会执行&lt;code&gt;单元化&lt;/code&gt;、&lt;code&gt;小淘宝&lt;/code&gt;等逻辑，将请求发送到正确的机房。请求到达机房后，先进入&lt;code&gt;统一接入层&lt;/code&gt;，注意这里的后端应用不需要申请&lt;code&gt;VIP&lt;/code&gt;，IP地址列表保存在&lt;code&gt;VIPServer&lt;/code&gt;中。&lt;code&gt;统一接入层&lt;/code&gt;从&lt;code&gt;VIPServer&lt;/code&gt;中拿到后端应用的IP地址列表，进行请求分发。&lt;code&gt;VIPServer&lt;/code&gt;的作用类似&lt;code&gt;HSF&lt;/code&gt;的&lt;code&gt;ConfigServer&lt;/code&gt;，可以大大减少应用&lt;code&gt;VIP&lt;/code&gt;的数量。以后做单元化部署的域名都会接入&lt;code&gt;统一接入层&lt;/code&gt;，将单元化的逻辑上推到了&lt;code&gt;CDN&lt;/code&gt;节点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;貌似是讲清楚了，不过这个过程已经做了很大的简化，因为我也仅仅是了解个大概。作为业务开发重点关注的是最下面的Java应用，转岗到技术保障后，才发现有机会可以从全局了解网站架构，接触到网络、DNS、CDN、LVS&amp;amp;VIP等等基础设施。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Linux TCP队列相关参数的总结</title>
        <link>https://mazhen.tech/p/linux-tcp%E9%98%9F%E5%88%97%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0%E7%9A%84%E6%80%BB%E7%BB%93/</link>
        <pubDate>Sat, 16 Aug 2014 11:11:24 +0800</pubDate>
        
        <guid>https://mazhen.tech/p/linux-tcp%E9%98%9F%E5%88%97%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0%E7%9A%84%E6%80%BB%E7%BB%93/</guid>
        <description>&lt;p&gt;在Linux上做网络应用的性能优化时，一般都会对TCP相关的内核参数进行调节，特别是和缓冲、队列有关的参数。网上搜到的文章会告诉你需要修改哪些参数，但我们经常是知其然而不知其所以然，每次照抄过来后，可能很快就忘记或混淆了它们的含义。本文尝试总结TCP队列缓冲相关的内核参数，从协议栈的角度梳理它们，希望可以更容易的理解和记忆。注意，本文内容均来源于参考文档，没有去读相关的内核源码做验证，不能保证内容严谨正确。作为Java程序员没读过内核源码是硬伤。&lt;/p&gt;
&lt;p&gt;下面我以server端为视角，从&lt;strong&gt;连接建立&lt;/strong&gt;、&lt;strong&gt;数据包接收&lt;/strong&gt;和&lt;strong&gt;数据包发送&lt;/strong&gt;这3条路径对参数进行归类梳理。&lt;/p&gt;
&lt;h3 id=&#34;一连接建立&#34;&gt;一、连接建立&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011113863.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;简单看下连接的建立过程，客户端向server发送&lt;code&gt;SYN&lt;/code&gt;包，server回复&lt;code&gt;SYN＋ACK&lt;/code&gt;，同时将这个处于&lt;code&gt;SYN_RECV&lt;/code&gt;状态的连接保存到半连接队列。客户端返回&lt;code&gt;ACK&lt;/code&gt;包完成三次握手，server将&lt;code&gt;ESTABLISHED&lt;/code&gt;状态的连接移入&lt;code&gt;accept&lt;/code&gt;队列，等待应用调用&lt;code&gt;accept()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可以看到建立连接涉及两个队列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;半连接队列&lt;/strong&gt;，保存&lt;code&gt;SYN_RECV&lt;/code&gt;状态的连接。队列长度由&lt;code&gt;net.ipv4.tcp_max_syn_backlog&lt;/code&gt;设置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;accept队列&lt;/strong&gt;，保存&lt;code&gt;ESTABLISHED&lt;/code&gt;状态的连接。队列长度为&lt;code&gt;min(net.core.somaxconn, backlog)&lt;/code&gt;。其中&lt;code&gt;backlog&lt;/code&gt;是我们创建&lt;code&gt;ServerSocket(int port,int backlog)&lt;/code&gt;时指定的参数，最终会传递给&lt;code&gt;listen&lt;/code&gt;方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#include &amp;lt;sys/socket.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int listen(int sockfd, int backlog);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果我们设置的&lt;code&gt;backlog&lt;/code&gt;大于&lt;code&gt;net.core.somaxconn&lt;/code&gt;，&lt;code&gt;accept&lt;/code&gt;队列的长度将被设置为&lt;code&gt;net.core.somaxconn&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外，为了应对&lt;code&gt;SYN flooding&lt;/code&gt;（即客户端只发送SYN包发起握手而不回应ACK完成连接建立，填满server端的半连接队列，让它无法处理正常的握手请求），Linux实现了一种称为&lt;code&gt;SYN cookie&lt;/code&gt;的机制，通过&lt;code&gt;net.ipv4.tcp_syncookies&lt;/code&gt;控制，设置为1表示开启。简单说&lt;code&gt;SYN cookie&lt;/code&gt;就是将连接信息编码在&lt;code&gt;ISN&lt;/code&gt;(initial sequence number)中返回给客户端，这时server不需要将半连接保存在队列中，而是利用客户端随后发来的ACK带回的&lt;code&gt;ISN&lt;/code&gt;还原连接信息，以完成连接的建立，避免了半连接队列被攻击&lt;code&gt;SYN&lt;/code&gt;包填满。对于一去不复返的客户端握手，不理它就是了。&lt;/p&gt;
&lt;h3 id=&#34;二数据包的接收&#34;&gt;二、数据包的接收&lt;/h3&gt;
&lt;p&gt;先看看接收数据包经过的路径：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011113357.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;数据包的接收，从下往上经过了三层：网卡驱动、系统内核空间，最后到用户态空间的应用。Linux内核使用&lt;code&gt;sk_buff&lt;/code&gt;(&lt;a class=&#34;link&#34; href=&#34;http://vger.kernel.org/~davem/skb.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;socket kernel buffers&lt;/a&gt;)数据结构描述一个数据包。当一个新的数据包到达，&lt;code&gt;NIC&lt;/code&gt;（network interface controller）调用&lt;code&gt;DMA engine&lt;/code&gt;，通过&lt;code&gt;Ring Buffer&lt;/code&gt;将数据包放置到内核内存区。&lt;code&gt;Ring Buffer&lt;/code&gt;的大小固定，它不包含实际的数据包，而是包含了指向&lt;code&gt;sk_buff&lt;/code&gt;的描述符。当&lt;code&gt;Ring Buffer&lt;/code&gt;满的时候，新来的数据包将给丢弃。一旦数据包被成功接收，&lt;code&gt;NIC&lt;/code&gt;发起中断，由内核的中断处理程序将数据包传递给IP层。经过IP层的处理，数据包被放入队列等待TCP层处理。每个数据包经过TCP层一系列复杂的步骤，更新TCP状态机，最终到达&lt;code&gt;recv Buffer&lt;/code&gt;，等待被应用接收处理。有一点需要注意，数据包到达&lt;code&gt;recv Buffer&lt;/code&gt;，TCP就会回&lt;code&gt;ACK&lt;/code&gt;确认，既TCP的&lt;code&gt;ACK&lt;/code&gt;表示数据包已经被操作系统内核收到，但并不确保应用层一定收到数据（例如这个时候系统crash），因此一般建议应用协议层也要设计自己的&lt;code&gt;ACK&lt;/code&gt;确认机制。&lt;/p&gt;
&lt;p&gt;上面就是一个相当简化的数据包接收流程，让我们逐层看看队列缓冲有关的参数。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;网卡Bonding模式&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当主机有1个以上的网卡时，Linux会将多个网卡绑定为一个虚拟的bonded网络接口，对TCP/IP而言只存在一个bonded网卡。多网卡绑定一方面能够提高网络吞吐量，另一方面也可以增强网络高可用。Linux支持7种Bonding模式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- `Mode 0 (balance-rr)` Round-robin策略，这个模式具备负载均衡和容错能力
- `Mode 1 (active-backup)` 主备策略，在绑定中只有一个网卡被激活，其他处于备份状态
- `Mode 2 (balance-xor)` XOR策略，通过源MAC地址与目的MAC地址做异或操作选择slave网卡
- `Mode 3 (broadcast)` 广播，在所有的网卡上传送所有的报文
- `Mode 4 (802.3ad)`  IEEE 802.3ad 动态链路聚合。创建共享相同的速率和双工模式的聚合组
- `Mode 5 (balance-tlb)` Adaptive transmit load balancing
- `Mode 6 (balance-alb)` Adaptive load balancing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;详细的说明参考内核文档&lt;a class=&#34;link&#34; href=&#34;https://www.kernel.org/doc/Documentation/networking/bonding.txt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Linux Ethernet Bonding Driver HOWTO&lt;/a&gt;。我们可以通过&lt;code&gt;cat /proc/net/bonding/bond0&lt;/code&gt;查看本机的Bonding模式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011114466.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;一般很少需要开发去设置网卡Bonding模式，自己实验的话可以参考&lt;a class=&#34;link&#34; href=&#34;http://linux.cloudibee.com/2009/10/linux-network-bonding-setup-guide/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这篇文档&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;网卡多队列及中断绑定&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;随着网络的带宽的不断提升，单核CPU已经不能满足网卡的需求，这时通过多队列网卡驱动的支持，可以将每个队列通过中断绑定到不同的CPU核上，充分利用多核提升数据包的处理能力。&lt;/p&gt;
&lt;p&gt;首先查看网卡是否支持多队列，使用&lt;code&gt;lspci -vvv&lt;/code&gt;命令，找到&lt;code&gt;Ethernet controller&lt;/code&gt;项：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011115916.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;如果有MSI-X， Enable+ 并且Count &amp;gt; 1，则该网卡是多队列网卡。&lt;/p&gt;
&lt;p&gt;然后查看是否打开了网卡多队列。使用命令&lt;code&gt;cat /proc/interrupts&lt;/code&gt;，如果看到eth0-TxRx-0表明多队列支持已经打开：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011115744.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;最后确认每个队列是否绑定到不同的CPU。&lt;code&gt;cat /proc/interrupts&lt;/code&gt;查询到每个队列的中断号，对应的文件&lt;code&gt;/proc/irq/${IRQ_NUM}/smp_affinity&lt;/code&gt;为中断号&lt;code&gt;IRQ_NUM&lt;/code&gt;绑定的CPU核的情况。以十六进制表示，每一位代表一个CPU核：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```
（00000001）代表CPU0
（00000010）代表CPU1
（00000011）代表CPU0和CPU1
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果绑定的不均衡，可以手工设置，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```
echo &amp;quot;1&amp;quot; &amp;gt; /proc/irq/99/smp_affinity  
echo &amp;quot;2&amp;quot; &amp;gt; /proc/irq/100/smp_affinity  
echo &amp;quot;4&amp;quot; &amp;gt; /proc/irq/101/smp_affinity  
echo &amp;quot;8&amp;quot; &amp;gt; /proc/irq/102/smp_affinity  
echo &amp;quot;10&amp;quot; &amp;gt; /proc/irq/103/smp_affinity  
echo &amp;quot;20&amp;quot; &amp;gt; /proc/irq/104/smp_affinity  
echo &amp;quot;40&amp;quot; &amp;gt; /proc/irq/105/smp_affinity  
echo &amp;quot;80&amp;quot; &amp;gt; /proc/irq/106/smp_affinity  
```
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ring Buffer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ring Buffer&lt;/code&gt;位于NIC和IP层之间，是一个典型的FIFO（先进先出）&lt;a class=&#34;link&#34; href=&#34;http://en.wikipedia.org/wiki/Circular_buffer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;环形队列&lt;/a&gt;。&lt;code&gt;Ring Buffer&lt;/code&gt;没有包含数据本身，而是包含了指向&lt;code&gt;sk_buff&lt;/code&gt;（&lt;a class=&#34;link&#34; href=&#34;http://vger.kernel.org/~davem/skb.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;socket kernel buffers&lt;/a&gt;）的描述符。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以使用&lt;code&gt;ethtool -g eth0&lt;/code&gt;查看当前&lt;code&gt;Ring Buffer&lt;/code&gt;的设置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011116458.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;上面的例子接收队列为4096，传输队列为256。可以通过&lt;code&gt;ifconfig&lt;/code&gt;观察接收和传输队列的运行状况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011116204.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RX errors&lt;/strong&gt;：收包总的错误数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RX dropped&lt;/strong&gt;: 表示数据包已经进入了&lt;code&gt;Ring Buffer&lt;/code&gt;，但是由于内存不够等系统原因，导致在拷贝到内存的过程中被丢弃。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RX overruns&lt;/strong&gt;: &lt;code&gt;overruns&lt;/code&gt;意味着数据包没到&lt;code&gt;Ring Buffer&lt;/code&gt;就被网卡物理层给丢弃了，而CPU无法及时的处理中断是造成&lt;code&gt;Ring Buffer&lt;/code&gt;满的原因之一，例如中断分配的不均匀。&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;dropped&lt;/code&gt;数量持续增加，建议增大&lt;code&gt;Ring Buffer&lt;/code&gt;，使用&lt;code&gt;ethtool -G&lt;/code&gt;进行设置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;Input Packet Queue(数据包接收队列)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当接收数据包的速率大于内核TCP处理包的速率，数据包将会缓冲在TCP层之前的队列中。接收队列的长度由参数&lt;code&gt;net.core.netdev_max_backlog&lt;/code&gt;设置。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;strong&gt;recv Buffer&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;recv buffer&lt;/code&gt;是调节TCP性能的关键参数。&lt;code&gt;BDP&lt;/code&gt;(Bandwidth-delay product，带宽延迟积) 是网络的带宽和与&lt;code&gt;RTT&lt;/code&gt;(round trip time)的乘积，&lt;code&gt;BDP&lt;/code&gt;的含义是任意时刻处于在途未确认的最大数据量。&lt;code&gt;RTT&lt;/code&gt;使用&lt;code&gt;ping&lt;/code&gt;命令可以很容易的得到。为了达到最大的吞吐量，&lt;code&gt;recv Buffer&lt;/code&gt;的设置应该大于&lt;code&gt;BDP&lt;/code&gt;，即&lt;code&gt;recv Buffer &amp;gt;= bandwidth * RTT&lt;/code&gt;。假设带宽是100Mbps，&lt;code&gt;RTT&lt;/code&gt;是100ms，那么&lt;code&gt;BDP&lt;/code&gt;的计算如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;BDP = 100Mbps * 100ms = (100 / 8) * (100 / 1000) = 1.25MB
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Linux在2.6.17以后增加了&lt;code&gt;recv Buffer&lt;/code&gt;自动调节机制，&lt;code&gt;recv buffer&lt;/code&gt;的实际大小会自动在最小值和最大值之间浮动，以期找到性能和资源的平衡点，因此大多数情况下不建议将&lt;code&gt;recv buffer&lt;/code&gt;手工设置成固定值。&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;net.ipv4.tcp_moderate_rcvbuf&lt;/code&gt;设置为1时，自动调节机制生效，每个TCP连接的recv Buffer由下面的3元数组指定：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net.ipv4.tcp_rmem = &amp;lt;MIN&amp;gt; &amp;lt;DEFAULT&amp;gt; &amp;lt;MAX&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;最初&lt;code&gt;recv buffer&lt;/code&gt;被设置为&lt;!-- raw HTML omitted --&gt;，同时这个缺省值会覆盖&lt;code&gt;net.core.rmem_default&lt;/code&gt;的设置。随后&lt;code&gt;recv buffer&lt;/code&gt;根据实际情况在最大值和最小值之间动态调节。在缓冲的动态调优机制开启的情况下，我们将&lt;code&gt;net.ipv4.tcp_rmem&lt;/code&gt;的最大值设置为&lt;code&gt;BDP&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;net.ipv4.tcp_moderate_rcvbuf&lt;/code&gt;被设置为0，或者设置了socket选项&lt;code&gt;SO_RCVBUF&lt;/code&gt;，缓冲的动态调节机制被关闭。&lt;code&gt;recv buffer&lt;/code&gt;的缺省值由&lt;code&gt;net.core.rmem_default&lt;/code&gt;设置，但如果设置了&lt;code&gt;net.ipv4.tcp_rmem&lt;/code&gt;，缺省值则被&lt;code&gt;&amp;lt;DEFAULT&amp;gt;&lt;/code&gt;覆盖。可以通过系统调用&lt;code&gt;setsockopt()&lt;/code&gt;设置&lt;code&gt;recv buffer&lt;/code&gt;的最大值为&lt;code&gt;net.core.rmem_max&lt;/code&gt;。在缓冲动态调节机制关闭的情况下，建议把缓冲的缺省值设置为&lt;code&gt;BDP&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;注意这里还有一个细节，缓冲除了保存接收的数据本身，还需要一部分空间保存socket数据结构等额外信息。因此上面讨论的&lt;code&gt;recv buffer&lt;/code&gt;最佳值仅仅等于&lt;code&gt;BDP&lt;/code&gt;是不够的，还需要考虑保存socket等额外信息的开销。Linux根据参数&lt;code&gt;net.ipv4.tcp_adv_win_scale&lt;/code&gt;计算额外开销的大小：&lt;/p&gt;
&lt;p&gt;Buffer / 2&lt;!-- raw HTML omitted --&gt;tcp_adv_win_scale&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;net.ipv4.tcp_adv_win_scale&lt;/code&gt;的值为1，则二分之一的缓冲空间用来做额外开销，如果为2的话，则四分之一缓冲空间用来做额外开销。因此&lt;code&gt;recv buffer&lt;/code&gt;的最佳值应该设置为：&lt;/p&gt;
&lt;p&gt;BDP / (1 – 1 / 2&lt;!-- raw HTML omitted --&gt;tcp_adv_win_scale&lt;!-- raw HTML omitted --&gt;)&lt;/p&gt;
&lt;h3 id=&#34;三数据包的发送&#34;&gt;三、数据包的发送&lt;/h3&gt;
&lt;p&gt;发送数据包经过的路径：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011117967.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;和接收数据的路径相反，数据包的发送从上往下也经过了三层：用户态空间的应用、系统内核空间、最后到网卡驱动。应用先将数据写入TCP &lt;code&gt;send buffer&lt;/code&gt;，TCP层将&lt;code&gt;send buffer&lt;/code&gt;中的数据构建成数据包转交给IP层。IP层会将待发送的数据包放入队列&lt;code&gt;QDisc&lt;/code&gt;(queueing discipline)。数据包成功放入&lt;code&gt;QDisc&lt;/code&gt;后，指向数据包的描述符&lt;code&gt;sk_buff&lt;/code&gt;被放入&lt;code&gt;Ring Buffer&lt;/code&gt;输出队列，随后网卡驱动调用&lt;code&gt;DMA engine&lt;/code&gt;将数据发送到网络链路上。&lt;/p&gt;
&lt;p&gt;同样我们逐层来梳理队列缓冲有关的参数。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;send Buffer&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同&lt;code&gt;recv Buffer&lt;/code&gt;类似，和&lt;code&gt;send Buffer&lt;/code&gt;有关的参数如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net.ipv4.tcp_wmem = &amp;lt;MIN&amp;gt; &amp;lt;DEFAULT&amp;gt; &amp;lt;MAX&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net.core.wmem_default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net.core.wmem_max
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;发送端缓冲的自动调节机制很早就已经实现，并且是无条件开启，没有参数去设置。如果指定了&lt;code&gt;tcp_wmem&lt;/code&gt;，则&lt;code&gt;net.core.wmem_default&lt;/code&gt;被&lt;code&gt;tcp_wmem&lt;/code&gt;的&lt;!-- raw HTML omitted --&gt;覆盖。&lt;code&gt;send Buffer&lt;/code&gt;在&lt;code&gt;tcp_wmem&lt;/code&gt;的最小值和最大值之间自动调节。如果调用&lt;code&gt;setsockopt()&lt;/code&gt;设置了socket选项&lt;code&gt;SO_SNDBUF&lt;/code&gt;，将关闭发送端缓冲的自动调节机制，&lt;code&gt;tcp_wmem&lt;/code&gt;将被忽略，&lt;code&gt;SO_SNDBUF&lt;/code&gt;的最大值由&lt;code&gt;net.core.wmem_max&lt;/code&gt;限制。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;QDisc&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;QDisc&lt;/code&gt;（queueing discipline ）位于IP层和网卡的&lt;code&gt;ring buffer&lt;/code&gt;之间。我们已经知道，&lt;code&gt;ring buffer&lt;/code&gt;是一个简单的FIFO队列，这种设计使网卡的驱动层保持简单和快速。而&lt;code&gt;QDisc&lt;/code&gt;实现了流量管理的高级功能，包括流量分类，优先级和流量整形（rate-shaping）。可以使用&lt;code&gt;tc&lt;/code&gt;命令配置&lt;code&gt;QDisc&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;QDisc&lt;/code&gt;的队列长度由&lt;code&gt;txqueuelen&lt;/code&gt;设置，和接收数据包的队列长度由内核参数&lt;code&gt;net.core.netdev_max_backlog&lt;/code&gt;控制所不同，&lt;code&gt;txqueuelen&lt;/code&gt;是和网卡关联，可以用&lt;code&gt;ifconfig&lt;/code&gt;命令查看当前的大小：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011117299.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;ifconfig&lt;/code&gt;调整&lt;code&gt;txqueuelen&lt;/code&gt;的大小：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ifconfig eth0 txqueuelen 2000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;Ring Buffer&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;和数据包的接收一样，发送数据包也要经过&lt;code&gt;Ring Buffer&lt;/code&gt;，使用&lt;code&gt;ethtool -g eth0&lt;/code&gt;查看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011118456.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;TX&lt;/code&gt;项是&lt;code&gt;Ring Buffer&lt;/code&gt;的传输队列，也就是发送队列的长度。设置也是使用命令&lt;code&gt;ethtool -G&lt;/code&gt;。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;TCP Segmentation和Checksum Offloading&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;操作系统可以把一些TCP/IP的功能转交给网卡去完成，特别是Segmentation(分片)和checksum的计算，这样可以节省CPU资源，并且由硬件代替&lt;code&gt;OS&lt;/code&gt;执行这些操作会带来性能的提升。&lt;/p&gt;
&lt;p&gt;一般以太网的&lt;code&gt;MTU&lt;/code&gt;（Maximum Transmission Unit）为1500 bytes，假设应用要发送数据包的大小为7300bytes，&lt;code&gt;MTU&lt;/code&gt;1500字节 － IP头部20字节 － TCP头部20字节＝有效负载为1460字节，因此7300字节需要拆分成5个segment：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011118576.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Segmentation&lt;/code&gt;(分片)操作可以由操作系统移交给网卡完成，虽然最终线路上仍然是传输5个包，但这样节省了CPU资源并带来性能的提升：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011118473.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;可以使用&lt;code&gt;ethtool -k eth0&lt;/code&gt;查看网卡当前的offloading情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011119505.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;上面这个例子&lt;code&gt;checksum&lt;/code&gt;和&lt;code&gt;tcp segmentation&lt;/code&gt;的&lt;code&gt;offloading&lt;/code&gt;都是打开的。如果想设置网卡的&lt;code&gt;offloading&lt;/code&gt;开关，可以使用&lt;code&gt;ethtool -K&lt;/code&gt;(注意K是大写)命令，例如下面的命令关闭了tcp segmentation offload：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ethtool -K eth0 tso off
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;strong&gt;网卡多队列和网卡Bonding模式&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在数据包的接收过程中已经介绍过了。&lt;/p&gt;
&lt;p&gt;至此，终于梳理完毕。整理TCP队列相关参数的起因是最近在排查一个网络超时问题，原因还没有找到，产生的“副作用”就是这篇文档。再想深入解决这个问题可能需要做TCP协议代码的profile，需要继续学习，希望不久的将来就可以再写文档和大家分享了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考文档&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.linuxjournal.com/content/queueing-linux-network-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Queueing in the Linux Network Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.ece.virginia.edu/cheetah/documents/papers/TCPlinux.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TCP Implementation in Linux: A Brief Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://sandilands.info/sgordon/impact-of-bandwidth-delay-product-on-tcp-throughput&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Impact of Bandwidth Delay Product on TCP Throughput&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://hellojava.info/?p=292&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java程序员也应该知道的系统知识系列之网卡&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>TCP `SO_LINGER` 选项对Socket.close的影响</title>
        <link>https://mazhen.tech/p/tcp-so_linger-%E9%80%89%E9%A1%B9%E5%AF%B9socket.close%E7%9A%84%E5%BD%B1%E5%93%8D/</link>
        <pubDate>Sun, 10 Aug 2014 11:08:57 +0800</pubDate>
        
        <guid>https://mazhen.tech/p/tcp-so_linger-%E9%80%89%E9%A1%B9%E5%AF%B9socket.close%E7%9A%84%E5%BD%B1%E5%93%8D/</guid>
        <description>&lt;p&gt;Java中通过Socket.setSoLinger设置&lt;code&gt;SO_LINGER&lt;/code&gt;选项，有三种组合形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Socket.setSoLinger(&lt;code&gt;false&lt;/code&gt;, linger)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设置为false，这时linger值被忽略。摘自&lt;a class=&#34;link&#34; href=&#34;http://book.douban.com/subject/1756533/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;unix network programming&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The default action of close with a TCP socket is to mark the socket as closed and return to the process immediately. The socket descriptor is on longer usable by the process: it can&amp;rsquo;t be used as an argument to read or write.
TCP will try to send any data that is already queued to be sent to the other end, and after this occurs, the normal TCP connection termination sequence takes place.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果设置为false，socket主动调用close时会立即返回，操作系统会将残留在缓冲区中的数据发送到对端，并按照正常流程关闭(交换FIN-ACK），最后连接进入&lt;code&gt;TIME_WAIT&lt;/code&gt;状态。&lt;/p&gt;
&lt;p&gt;我们可以写个演示程序，客户端发送较大的数据包后，立刻调用&lt;code&gt;close&lt;/code&gt;，而server端将&lt;code&gt;Receive Buffer&lt;/code&gt;设置的很小。&lt;code&gt;close&lt;/code&gt;会立即返回，客户端的Java进程结束，但是当我们用&lt;code&gt;tcpdump/Wireshark&lt;/code&gt;抓包会发现，操作系统正在帮你发送数据，内核缓冲区中的数据发送完毕后，发送&lt;code&gt;FIN&lt;/code&gt;包关闭连接。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Socket.setSoLinger(&lt;code&gt;true&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;TCP discards any data still remaining in the socket send buffer and sends an RST to the peer, not the normal four-packet connection termination sequence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主动调用&lt;code&gt;close&lt;/code&gt;的一方也是立刻返回，但是这时TCP会丢弃发送缓冲中的数据，而且不是按照正常流程关闭连接（不发送FIN包），直接发送&lt;code&gt;RST&lt;/code&gt;，对端会收到&lt;code&gt;java.net.SocketException: Connection reset&lt;/code&gt;异常。同样使用tcpdump抓包可以很容易观察到。&lt;/p&gt;
&lt;p&gt;另外有些人会用这种方式解决主动关闭放方有大量&lt;code&gt;TIME_WAIT&lt;/code&gt;状态连接的问题，因为发送完&lt;code&gt;RST&lt;/code&gt;后，连接立即销毁，不会停留在&lt;code&gt;TIME_WAIT&lt;/code&gt;状态。一般不建议这么做，除非你有&lt;a class=&#34;link&#34; href=&#34;http://stackoverflow.com/questions/3757289/tcp-option-so-linger-zero-when-its-required/13088864#13088864&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;合适的理由&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;If the a client of your server application misbehaves (times out, returns invalid data, etc.) an abortive close makes sense to avoid being stuck in CLOSE_WAIT or ending up in the TIME_WAIT state.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you must restart your server application which currently has thousands of client connections you might consider setting this socket option to avoid thousands of server sockets in TIME_WAIT (when calling close() from the server end) as this might prevent the server from getting available ports for new client connections after being restarted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On page 202 in the aforementioned book it specifically says: &amp;ldquo;There are certain circumstances which warrant using this feature to send an abortive close. One example is an RS-232 terminal server, which might hang forever in CLOSE_WAIT trying to deliver data to a stuck terminal port, but would properly reset the stuck port if it got an RST to discard the pending data.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Socket.setSoLinger(&lt;code&gt;true&lt;/code&gt;, &lt;code&gt;linger &amp;gt; 0&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;if there is any data still remaining in the socket send buffer, the process will sleep when calling close() until either all the data is sent and acknowledged by the peer or the configured linger timer expires.
if the linger time expires before the remaining data is sent and acknowledged, close returns EWOULDBLOCK and any remaining data in the send buffer is discarded.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果&lt;code&gt;SO_LINGER&lt;/code&gt;选项生效，并且超时设置大于零，调用close的线程被阻塞，TCP会发送缓冲区中的残留数据，这时有两种可能的情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据发送完毕，收到对方的ACK，然后进行连接的正常关闭（交换FIN-ACK）&lt;/li&gt;
&lt;li&gt;超时，未发送完成的数据被丢弃，连接发送&lt;code&gt;RST&lt;/code&gt;进行非正常关闭&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;类似的我们也可以构造demo观察这种场景。客户端发送较大的数据包，server端将Receive Buffer设置的很小。设置&lt;code&gt;linger&lt;/code&gt;为1，调用&lt;code&gt;close&lt;/code&gt;时等待1秒。注意&lt;code&gt;SO_LINGER&lt;/code&gt;的单位为&lt;strong&gt;秒&lt;/strong&gt;，好多人被坑过。假设&lt;code&gt;close&lt;/code&gt;后1秒内缓冲区中的数据发送不完，使用&lt;code&gt;tcpdump/Wireshark&lt;/code&gt;可以观察到客户端发送&lt;code&gt;RST&lt;/code&gt;包，服务端收到&lt;code&gt;java.net.SocketException: Connection reset&lt;/code&gt;异常。&lt;/p&gt;
&lt;p&gt;最后，在使用NIO时，最好不设置&lt;code&gt;SO_LINGER&lt;/code&gt;，以后会再写一篇文章分析。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>应用关闭后占用端口时间过长的问题</title>
        <link>https://mazhen.tech/p/%E5%BA%94%E7%94%A8%E5%85%B3%E9%97%AD%E5%90%8E%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Tue, 01 Jul 2014 11:00:10 +0800</pubDate>
        
        <guid>https://mazhen.tech/p/%E5%BA%94%E7%94%A8%E5%85%B3%E9%97%AD%E5%90%8E%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>&lt;p&gt;早上毕玄转给我一个问题，vsearch在上海机房部署的应用，在应用关闭后，端口释放的时间要比杭州机房的时间长。&lt;/p&gt;
&lt;p&gt;TCP的基本知识，主动关闭连接的一方会处于&lt;code&gt;TIME_WAIT&lt;/code&gt;状态，并停留两倍的&lt;code&gt;MSL&lt;/code&gt;（Maximum segment lifetime）时长。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mazhen.tech/images/202207011102616.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;那就检查一下MSL的设置。网上有很多文章说，可以通过设置&lt;code&gt;net.ipv4.tcp_fin_timeout&lt;/code&gt;来控制MSL。其实这有点误导人。查看&lt;a class=&#34;link&#34; href=&#34;https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Linux kernel的文档&lt;/a&gt; ，发现tcp_fin_timeout是指停留在FIN_WAIT_2状态的时间：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tcp_fin_timeout - INTEGER
The length of time an orphaned (no longer referenced by any application) connection will remain in the FIN_WAIT_2 state before it is aborted at the local end.  While a perfectly valid &amp;ldquo;receive only&amp;rdquo; state for an un-orphaned connection, an orphaned connection in FIN_WAIT_2 state could otherwise wait forever for the remote to close its end of the connection. Default: 60 seconds&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;幸好这个问题原先在内部请教过：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sysctl调节不了，只能调节复用和回收。
以前改小是改下面文件，重新编译内核的。
grep -i timewait_len /usr/src/kernels/2.6.32-220.el6.x86_64/include/net/tcp.h
define TCP_TIMEWAIT_LEN (60HZ) / how long to wait to destroy TIME-WAIT
define TCP_FIN_TIMEOUT TCP_TIMEWAIT_LEN&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而阿里内核支持修改&lt;code&gt;TIME_WAIT&lt;/code&gt;时间：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;net.ipv4.tcp_tw_timeout
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后找了两台机器做对比，用&lt;code&gt;sysctl&lt;/code&gt;命令查看。杭州机房的机器：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo sysctl -a | grep net.ipv4.tcp_tw_timeout
net.ipv4.tcp_tw_timeout = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上海机房的机器：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$sudo sysctl -a | grep net.ipv4.tcp_tw_timeout
net.ipv4.tcp_tw_timeout = 60
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原因很明显，上海机器的设置为60S。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
